con.

    @RequestMapping(value = "/email-labels", produces = { "application/json" }, method = RequestMethod.GET)
 public ResponseEntity<CMTEmailLocationResponseDTO> emailLocation(CMTEmailLocationRequestDTO cmtEmailLocationRequestDTO, UUID uuid) {
        ResponseEntity<CMTEmailLocationResponseDTO> response;
        try {
            CMTEmailLocationResponseDTO  cmtEmailLocationResponseDTO=cmtEmailLocationService.getEmailLocations(cmtEmailLocationRequestDTO,uuid);
            response=new ResponseEntity<>(cmtEmailLocationResponseDTO,HttpStatus.OK);
        }catch (Exception e){
            response=new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
        return response;
    }
---
ser.

 public CMTEmailLocationResponseDTO getEmailLocations(CMTEmailLocationRequestDTO cmtEmailLocationRequestDTO, UUID uuid){

        CMTEmailLocationResponseDTO cmtEmailLocationResponseDTO= new CMTEmailLocationResponseDTO();
        try {
            if (cmtEmailLocationRequestDTO.getEquipmentId() != null) {
                cmtEmailLocationResponseDTO = cmtEmailLocationRequestDTO.getEquipmentType().equalsIgnoreCase("circuit") ?
                    cmtLocationRepository.getCircuitLocationId(cmtEmailLocationRequestDTO.getEquipmentId()) :
                    cmtLocationRepository.getDeviceLocationId(cmtEmailLocationRequestDTO.getEquipmentId());
            } else {
                Integer areaLocationId = cmtLocationRepository.getAreaLocationId(cmtEmailLocationRequestDTO.getCity(),
                    cmtEmailLocationRequestDTO.getState(),
                    cmtEmailLocationRequestDTO.getCountry());
                cmtEmailLocationResponseDTO.setUtsLocationId(areaLocationId);
            }
        }
        catch(Exception e){

        }
        return cmtEmailLocationResponseDTO;
    }
---------------
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class CMTEmailLocationControllerTest {

    @Mock
    private CMTEmailLocationService cmtEmailLocationService;

    @InjectMocks
    private CMTEmailLocationController cmtEmailLocationController;

    @Test
    public void testEmailLocationSuccess() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();
        CMTEmailLocationResponseDTO responseDTO = new CMTEmailLocationResponseDTO();
        
        // Mock the service to return a response
        when(cmtEmailLocationService.getEmailLocations(requestDTO, uuid)).thenReturn(responseDTO);
        
        // Call the controller method
        ResponseEntity<CMTEmailLocationResponseDTO> responseEntity = cmtEmailLocationController.emailLocation(requestDTO, uuid);
        
        // Verify that the service method was called with the correct parameters
        verify(cmtEmailLocationService).getEmailLocations(requestDTO, uuid);
        
        // Check the response
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(responseDTO, responseEntity.getBody());
    }

    @Test
    public void testEmailLocationError() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();
        
        // Mock the service to throw an exception
        when(cmtEmailLocationService.getEmailLocations(requestDTO, uuid)).thenThrow(new SomeException());
        
        // Call the controller method
        ResponseEntity<CMTEmailLocationResponseDTO> responseEntity = cmtEmailLocationController.emailLocation(requestDTO, uuid);
        
        // Verify that the service method was called with the correct parameters
        verify(cmtEmailLocationService).getEmailLocations(requestDTO, uuid);
        
        // Check the response
        assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());
    }

    @Test
    public void testEmailLocationUnhandledException() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();
        
        // Mock the service to throw an unchecked exception (e.g., NullPointerException)
        when(cmtEmailLocationService.getEmailLocations(requestDTO, uuid)).thenThrow(new NullPointerException());
        
        // Call the controller method
        ResponseEntity<CMTEmailLocationResponseDTO> responseEntity = cmtEmailLocationController.emailLocation(requestDTO, uuid);
        
        // Verify that the service method was called with the correct parameters
        verify(cmtEmailLocationService).getEmailLocations(requestDTO, uuid);
        
        // Check the response
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());
    }
}
-------------
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class CMTEmailLocationServiceTest {

    @Mock
    private CMTLocationRepository cmtLocationRepository;

    @InjectMocks
    private CMTEmailLocationService cmtEmailLocationService;

    @Before
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetEmailLocationsWithEquipmentIdCircuitType() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();
        requestDTO.setEquipmentId(123); // Set equipmentId
        requestDTO.setEquipmentType("circuit");

        // Mock the repository to return a location response
        when(cmtLocationRepository.getCircuitLocationId(123)).thenReturn(new CMTEmailLocationResponseDTO());

        // Call the service method
        CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

        // Verify that the repository method was called with the correct parameter
        verify(cmtLocationRepository).getCircuitLocationId(123);

        // Check the response
        assertNotNull(responseDTO);
    }

    @Test
    public void testGetEmailLocationsWithEquipmentIdDeviceType() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();
        requestDTO.setEquipmentId(456); // Set equipmentId
        requestDTO.setEquipmentType("device");

        // Mock the repository to return a location response
        when(cmtLocationRepository.getDeviceLocationId(456)).thenReturn(new CMTEmailLocationResponseDTO());

        // Call the service method
        CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

        // Verify that the repository method was called with the correct parameter
        verify(cmtLocationRepository).getDeviceLocationId(456);

        // Check the response
        assertNotNull(responseDTO);
    }

    @Test
    public void testGetEmailLocationsWithInvalidEquipmentType() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();
        requestDTO.setEquipmentId(789); // Set equipmentId
        requestDTO.setEquipmentType("invalid-type");

        // Call the service method
        CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

        // Verify that the repository methods were not called
        verifyZeroInteractions(cmtLocationRepository);

        // Check the response
        assertNotNull(responseDTO);
    }

    @Test
    public void testGetEmailLocationsWithoutEquipmentId() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();
        requestDTO.setCity("City");
        requestDTO.setState("State");
        requestDTO.setCountry("Country");

        // Mock the repository to return an area location response
        when(cmtLocationRepository.getAreaLocationId("City", "State", "Country")).thenReturn(123);

        // Call the service method
        CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

        // Verify that the repository method was called with the correct parameters
        verify(cmtLocationRepository).getAreaLocationId("City", "State", "Country");

        // Check the response
        assertNotNull(responseDTO);
        assertEquals(123, responseDTO.getUtsLocationId().intValue());
    }

    @Test
    public void testGetEmailLocationsWithError() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();

        // Mock the repository to throw an exception
        when(cmtLocationRepository.getAreaLocationId("City", "State", "Country")).thenThrow(new SomeException());

        // Call the service method
        CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

        // Verify that the repository method was called with the correct parameters
        verify(cmtLocationRepository).getAreaLocationId("City", "State", "Country");

        // Check the response
        assertNotNull(responseDTO);
        // Handle the error response as needed
    }
}
--------------------------
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class CMTEmailLocationServiceTest {

    @Mock
    private CMTLocationRepository cmtLocationRepository;

    @InjectMocks
    private CMTEmailLocationService cmtEmailLocationService;

    @Before
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetEmailLocationsWithExceptionInCatchBlock() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();

        // Mock the repository to throw an exception
        when(cmtLocationRepository.getAreaLocationId("City", "State", "Country")).thenThrow(new SomeException());

        // Call the service method
        CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

        // Verify that the repository method was called with the correct parameters
        verify(cmtLocationRepository).getAreaLocationId("City", "State", "Country");

        // Check the response
        assertNotNull(responseDTO);
        // Handle the error response as needed
    }
}
=============
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class CMTEmailLocationServiceTest {

    @Mock
    private CMTLocationRepository cmtLocationRepository;

    @InjectMocks
    private CMTEmailLocationService cmtEmailLocationService;

    @Before
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetEmailLocationsWithExceptionInCatchBlock() throws Exception {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();

        // Mock the repository to throw an exception
        when(cmtLocationRepository.getAreaLocationId("City", "State", "Country")).thenThrow(new Exception("Test Exception"));

        // Call the service method
        CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

        // Verify that the repository method was called with the correct parameters
        verify(cmtLocationRepository).getAreaLocationId("City", "State", "Country");

        // Check the response
        assertNotNull(responseDTO);
        // Handle the error response as needed
    }
}

====================
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;

import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class CMTEmailLocationServiceTest {

    @Mock
    private CMTLocationRepository cmtLocationRepository;

    @InjectMocks
    private CMTEmailLocationService cmtEmailLocationService;

    @Before
    public void init() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(CMTEmailLocationService.class);
    }

    @Test
    public void testGetEmailLocationsWithExceptionInCatchBlock() throws Exception {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();

        // Mock the repository to throw an exception
        when(cmtLocationRepository.getAreaLocationId("City", "State", "Country")).thenThrow(new Exception("Test Exception"));

        // Mock the exception being thrown within the catch block
        PowerMockito.doThrow(new Exception("Test Exception")).when(CMTEmailLocationService.class, "methodThatThrowsException");

        // Call the service method
        CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

        // Verify that the repository method was called with the correct parameters
        verify(cmtLocationRepository).getAreaLocationId("City", "State", "Country");

        // Check the response
        assertNotNull(responseDTO);
        // Handle the error response as needed
    }
}

---
  public CMTEmailLocationResponseDTO getEmailLocations(CMTEmailLocationRequestDTO cmtEmailLocationRequestDTO, UUID uuid){

        CMTEmailLocationResponseDTO cmtEmailLocationResponseDTO= new CMTEmailLocationResponseDTO();
        try {
            if (cmtEmailLocationRequestDTO.getValid()) {
                cmtEmailLocationResponseDTO = cmtEmailLocationRequestDTO.getEquipmentType().equalsIgnoreCase("circuit") ?
                    cmtLocationRepository.getCircuitLocationId(cmtEmailLocationRequestDTO.getEquipmentId()) :
                    cmtLocationRepository.getDeviceLocationId(cmtEmailLocationRequestDTO.getEquipmentId());
            } else {
                Integer areaLocationId = cmtLocationRepository.getAreaLocationId(cmtEmailLocationRequestDTO.getCity(),
                    cmtEmailLocationRequestDTO.getState(),
                    cmtEmailLocationRequestDTO.getCountry());
                cmtEmailLocationResponseDTO.setUtsLocationId(areaLocationId);
            }
        }
        catch(Exception e){

        }

--------------------
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;
import static org.mockito.BDDMockito.given;

public class CMTEmailLocationServiceTest {

    @Mock
    private CMTLocationRepository cmtLocationRepository;

    @InjectMocks
    private CMTEmailLocationService cmtEmailLocationService;

    @Before
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetEmailLocationsWithExceptionHandling() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();

        // Mock the repository method to return normally
        when(cmtLocationRepository.getAreaLocationId(any(), any(), any())).thenReturn(123);

        // Mock the service method to throw an exception
        doThrow(new SomeException()).when(cmtEmailLocationService).getEmailLocations(requestDTO, uuid);

        // Call the service method
        CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

        // Verify that the repository method was called
        verify(cmtLocationRepository).getAreaLocationId(requestDTO.getCity(), requestDTO.getState(), requestDTO.getCountry());

        // Verify that the service method properly handled the exception
        assertNotNull(responseDTO);
        // Handle the error response as needed
    }

    @Test
    public void testGetEmailLocationsWithoutException() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();

        // Mock the repository method to return normally
        when(cmtLocationRepository.getAreaLocationId(any(), any(), any())).thenReturn(123);

        // Call the service method
        CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

        // Verify that the repository method was called
        verify(cmtLocationRepository).getAreaLocationId(requestDTO.getCity(), requestDTO.getState(), requestDTO.getCountry());

        // Verify that the service method returns a valid response
        assertNotNull(responseDTO);
    }
}
--------------------
@Test
public void testGetEmailLocationsWithValidEquipmentAndValidFlagTrue() {
    // Mock input data
    CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
    UUID uuid = UUID.randomUUID();
    requestDTO.setValid(true);
    requestDTO.setEquipmentType("circuit");
    requestDTO.setEquipmentId(123);

    // Mock the repository to return a response
    when(cmtLocationRepository.getCircuitLocationId(123)).thenReturn(new CMTEmailLocationResponseDTO());

    // Call the service method
    CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

    // Verify that the repository method was called with the correct parameters
    verify(cmtLocationRepository).getCircuitLocationId(123);

    // Check the response
    assertNotNull(responseDTO);
}

@Test
public void testGetEmailLocationsWithNonValidEquipmentAndValidFlagFalse() {
    // Mock input data
    CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
    UUID uuid = UUID.randomUUID();
    requestDTO.setValid(false);
    requestDTO.setCity("City");
    requestDTO.setState("State");
    requestDTO.setCountry("Country");

    // Mock the repository to return an area location response
    when(cmtLocationRepository.getAreaLocationId("City", "State", "Country")).thenReturn(123);

    // Call the service method
    CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

    // Verify that the repository method was called with the correct parameters
    verify(cmtLocationRepository).getAreaLocationId("City", "State", "Country");

    // Check the response
    assertNotNull(responseDTO);
    assertEquals(123, responseDTO.getUtsLocationId().intValue());
}

===========
@Test
public void testGetEmailLocationsWithValidDeviceEquipment() {
    // Mock input data for a valid device equipment
    CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
    requestDTO.setValid(true);
    requestDTO.setEquipmentType("device");
    requestDTO.setEquipmentId(456);
    UUID uuid = UUID.randomUUID();

    // Mock the repository to return a response for getDeviceLocationId
    when(cmtLocationRepository.getDeviceLocationId(456)).thenReturn(new CMTEmailLocationResponseDTO());

    // Call the service method
    CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

    // Verify that the repository method was called with the correct parameters
    verify(cmtLocationRepository).getDeviceLocationId(456);

    // Check the response
    assertNotNull(responseDTO);
}
========>
@Test
public void testGetEmailLocationsWithValidDeviceEquipment() {
    // Mock input data for a valid device equipment
    CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
    requestDTO.setValid(true);
    requestDTO.setEquipmentType("device");
    requestDTO.setEquipmentId(456);
    UUID uuid = UUID.randomUUID();

    // Mock the repository to return a response for getDeviceLocationId
    when(cmtLocationRepository.getDeviceLocationId(456)).thenReturn(new CMTEmailLocationResponseDTO());

    // Call the service method
    CMTEmailLocationResponseDTO responseDTO = cmtEmailLocationService.getEmailLocations(requestDTO, uuid);

    // Verify that the repository method was called with the correct parameters
    verify(cmtLocationRepository).getDeviceLocationId(456);

    // Check the response
    assertNotNull(responseDTO);
}
---
      @RequestMapping(value = "/email-labels", produces = { "application/json" }, method = RequestMethod.GET)

    public ResponseEntity<CMTEmailLocationResponseDTO> emailLocation(CMTEmailLocationRequestDTO cmtEmailLocationRequestDTO, UUID uuid) {
        ResponseEntity<CMTEmailLocationResponseDTO> response;
        try {
            CMTEmailLocationResponseDTO  cmtEmailLocationResponseDTO=cmtEmailLocationService.getEmailLocations(cmtEmailLocationRequestDTO,uuid);
            response=new ResponseEntity<>(cmtEmailLocationResponseDTO,HttpStatus.OK);
        }catch (Exception e){
            response=new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
        return response;
    }
----------->
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

public class CMTEmailLocationControllerTest {

    @Mock
    private CMTEmailLocationService cmtEmailLocationService;

    @InjectMocks
    private CMTEmailLocationController cmtEmailLocationController;

    @Before
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testEmailLocationSuccess() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();
        CMTEmailLocationResponseDTO expectedResponse = new CMTEmailLocationResponseDTO();

        // Mock the service to return a response
        when(cmtEmailLocationService.getEmailLocations(requestDTO, uuid)).thenReturn(expectedResponse);

        // Call the controller method
        ResponseEntity<CMTEmailLocationResponseDTO> response = cmtEmailLocationController.emailLocation(requestDTO, uuid);

        // Verify that the service method was called with the correct parameters
        verify(cmtEmailLocationService).getEmailLocations(requestDTO, uuid);

        // Check the response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(expectedResponse, response.getBody());
    }

    @Test
    public void testEmailLocationException() {
        // Mock input data
        CMTEmailLocationRequestDTO requestDTO = new CMTEmailLocationRequestDTO();
        UUID uuid = UUID.randomUUID();

        // Mock the service to throw an exception
        when(cmtEmailLocationService.getEmailLocations(requestDTO, uuid)).thenThrow(new SomeException());

        // Call the controller method
        ResponseEntity<CMTEmailLocationResponseDTO> response = cmtEmailLocationController.emailLocation(requestDTO, uuid);

        // Verify that the service method was called with the correct parameters
        verify(cmtEmailLocationService).getEmailLocations(requestDTO, uuid);

        // Check the response
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    }
}
