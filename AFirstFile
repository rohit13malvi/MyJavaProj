import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Pageable;

import java.util.*;
import java.util.concurrent.CompletableFuture;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class DashBoardProgressTrackerSummaryServiceTest {

    @Mock
    private EmailMessageSearchRepository emailMessageSearchRepository;

    @Mock
    private DashBoardSummaryHandler dashBoardSummaryHandler;

    @Mock
    private EmailMessageLabelsRepository emailMessageLabelsRepository;

    @InjectMocks
    private DashBoardProgressTrackerSummaryService service;

    @Test
    public void testGetDashBoardProgressTrackerSummary() throws Exception {
        UUID uuid = UUID.randomUUID();
        Pageable page = mock(Pageable.class);
        EmailMessageFilterCriteria processedCriteria = mock(EmailMessageFilterCriteria.class);
        EmailMessageFilterCriteria unProcessedCriteria = mock(EmailMessageFilterCriteria.class);

        CompletableFuture<Map<String, Long>> autoProcessedFuture = CompletableFuture.completedFuture(new HashMap<>());
        CompletableFuture<Map<String, Long>> unProcessedMapFuture = CompletableFuture.completedFuture(new HashMap<>());

        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(anyString(), anyString(), anyString()))
                .thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(Collections.emptyList());

        CompletableFuture<Void> combinedProgressTrackerFuture = CompletableFuture.allOf(autoProcessedFuture, unProcessedMapFuture);
        doNothing().when(combinedProgressTrackerFuture).get();

        Map<String, Map<String, Long>> result = service.getDashBoardProgressTrackerSummary(
                uuid, page, processedCriteria, unProcessedCriteria);

        // Assertions for the result
        // Add assertions based on the expected behavior
    }

    @Test
    public void testSearchDashBoardProgressTrackerSummary() throws Exception {
        String dashBoardStatusSearch = "STATUS";
        EmailMessageFilterCriteria emailFilterCriteria = mock(EmailMessageFilterCriteria.class);
        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(anyString(), anyString(), anyString()))
                .thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(Collections.emptyList());

        Map<String, Long> result = invokeSearchDashBoardProgressTrackerSummary(dashBoardStatusSearch, emailFilterCriteria);

        // Assertions for the result
        // Add assertions based on the expected behavior
    }

    @SuppressWarnings("unchecked")
    private Map<String, Long> invokeSearchDashBoardProgressTrackerSummary(String dashBoardStatusSearch,
                                                                          EmailMessageFilterCriteria emailFilterCriteria) throws Exception {
        return (Map<String, Long>) invokePrivateMethod("searchDashBoardProgressTrackerSummary",
                new Class[]{String.class, EmailMessageFilterCriteria.class},
                new Object[]{dashBoardStatusSearch, emailFilterCriteria});
    }

    @SuppressWarnings("rawtypes")
    private Object invokePrivateMethod(String methodName, Class[] paramTypes, Object[] params) throws Exception {
        java.lang.reflect.Method method = DashBoardProgressTrackerSummaryService.class.getDeclaredMethod(methodName, paramTypes);
        method.setAccessible(true);
        return method.invoke(service, params);
    }

    @Test
    public void testCreateProgressTrackerMap() throws Exception {
        List<MessagesEntity> messagesEntities = new ArrayList<>();
        messagesEntities.add(new MessagesEntity(/* Initialize if needed */));

        Map<String, Long> result = invokeCreateProgressTrackerMap(messagesEntities);

        // Assertions for the result
        // Add assertions based on the expected behavior
    }

    @SuppressWarnings("unchecked")
    private Map<String, Long> invokeCreateProgressTrackerMap(List<MessagesEntity> searchResponse) throws Exception {
        return (Map<String, Long>) invokePrivateMethod("createProgressTrackerMap",
                new Class[]{List.class},
                new Object[]{searchResponse});
    }

    @Test
    public void testPrepareProgressTrackerResponse() throws Exception {
        Set<String> keys = new HashSet<>(Arrays.asList("key1", "key2"));
        Map<String, Long> autoProcessedMap = new HashMap<>();
        autoProcessedMap.put("key1", 10L);
        Map<String, Long> unProcessedMap = new HashMap<>();
        unProcessedMap.put("key2", 5L);

        Map<String, Map<String, Long>> result = invokePrepareProgressTrackerResponse(keys, autoProcessedMap, unProcessedMap);

        // Assertions for the result
        // Add assertions based on the expected behavior
    }

    @SuppressWarnings("unchecked")
    private Map<String, Map<String, Long>> invokePrepareProgressTrackerResponse(
            Set<String> keys, Map<String, Long> autoProcessedMap, Map<String, Long> unProcessedMap) throws Exception {
        return (Map<String, Map<String, Long>>) invokePrivateMethod("prepareProgressTrackerResponse",
                new Class[]{Set.class, Map.class, Map.class},
                new Object[]{keys, autoProcessedMap, unProcessedMap});
    }
}
-------
when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(
        eq(SearchConstants.LABEL_AGE), eq(SearchConstants.HOURS_168.toString()), eq(SearchConstants.EQUALS)))
        .thenReturn(new EmailMessageFilterCriteria());
when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(
        eq(SearchConstants.UNPROCESSED), eq(SearchConstants.UNPROCESSED), eq(SearchConstants.EQUALS)))
        .thenReturn(new EmailMessageFilterCriteria());
when(emailMessageSearchRepository.findAll(any(EmailMessageSearchSpecification.class)))
        .thenReturn(Collections.emptyList());
