import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Pageable;

@SpringBootTest
class DashBoardProgressTrackerSummaryServiceTest {

    @Autowired
    private DashBoardProgressTrackerSummaryService serviceUnderTest;

    @Mock
    private EmailMessageSearchRepository emailMessageSearchRepositoryMock;

    @Mock
    private DashBoardSummaryHandler dashBoardSummaryHandlerMock;

    @Mock
    private EmailMessageLabelsRepository emailMessageLabelsRepositoryMock;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        serviceUnderTest.emailMessageSearchRepository = emailMessageSearchRepositoryMock;
        serviceUnderTest.dashBoardSummaryHandler = dashBoardSummaryHandlerMock;
        serviceUnderTest.emailMessageLabelsRepository = emailMessageLabelsRepositoryMock;
    }

    @Test
    void testGetDashBoardProgressTrackerSummary_Success() {
        UUID uuid = UUID.randomUUID();
        Pageable page = mock(Pageable.class);

        Map<String, Long> processedData = new HashMap<>();
        processedData.put("Key1", 10L);
        processedData.put("Key2", 20L);
        when(emailMessageSearchRepositoryMock.searchDashBoardProgressTrackerSummary(eq(SearchConstants.AUTOMATICALLY_PROCESSED), any()))
            .thenReturn(processedData);

        Map<String, Long> unProcessedData = new HashMap<>();
        unProcessedData.put("Key3", 5L);
        unProcessedData.put("Key4", 15L);
        when(emailMessageSearchRepositoryMock.searchDashBoardProgressTrackerSummary(eq(SearchConstants.UNPROCESSED), any()))
            .thenReturn(unProcessedData);

        Map<String, Map<String, Long>> result = serviceUnderTest.getDashBoardProgressTrackerSummary(uuid, page, null, null);

        assertNotNull(result);

        verify(emailMessageSearchRepositoryMock, times(1)).searchDashBoardProgressTrackerSummary(eq(SearchConstants.AUTOMATICALLY_PROCESSED), any());
        verify(emailMessageSearchRepositoryMock, times(1)).searchDashBoardProgressTrackerSummary(eq(SearchConstants.UNPROCESSED), any());
    }

    // Add more test cases to cover exception handling, edge cases, etc.
}
