-- Table: ucmcmt.email_messages

-- DROP TABLE ucmcmt.email_messages;

CREATE TABLE IF NOT EXISTS ucmcmt.email_messages
(
    email_message_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    message_id integer NOT NULL,
    header_id character varying(200) COLLATE pg_catalog."default",
    subject text COLLATE pg_catalog."default",
    body_html text COLLATE pg_catalog."default",
    body_text text COLLATE pg_catalog."default",
    body_translated text COLLATE pg_catalog."default",
    language character varying(20) COLLATE pg_catalog."default",
    party_id integer,
    created_date timestamp without time zone,
    created_by character varying COLLATE pg_catalog."default",
    modified_date timestamp without time zone,
    modified_by character varying COLLATE pg_catalog."default",
    is_seen boolean,
    email_message_status_id integer,
    CONSTRAINT email_messages_pkey PRIMARY KEY (email_message_id),
    CONSTRAINT email_message_status_fkkey FOREIGN KEY (email_message_status_id)
        REFERENCES ucmcmt.email_message_status (email_message_status_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT message_fk FOREIGN KEY (message_id)
        REFERENCES ucmcmt.messages (message_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT party_fk FOREIGN KEY (party_id)
        REFERENCES ucmcmt.party (key) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
WITH (
    OIDS = FALSE
)
TABLESPACE pg_default;

ALTER TABLE ucmcmt.email_messages
    OWNER to ucmqa;
-- Index: idx_email_message_status_id

-- DROP INDEX ucmcmt.idx_email_message_status_id;

CREATE INDEX idx_email_message_status_id
    ON ucmcmt.email_messages USING btree
    (email_message_status_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_message_id

-- DROP INDEX ucmcmt.idx_message_id;

CREATE INDEX idx_message_id
    ON ucmcmt.email_messages USING btree
    (message_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_party_id

-- DROP INDEX ucmcmt.idx_party_id;

CREATE INDEX idx_party_id
    ON ucmcmt.email_messages USING btree
    (party_id ASC NULLS LAST)
    TABLESPACE pg_default;
=============================================
import java.util.ArrayList;
import java.util.List;

public class GlobalSearchResponseUtil {

    public static GlobalSearchResponse createDummyGlobalSearchResponse() {
        GlobalSearchResponse response = new GlobalSearchResponse();

        // Create a list of reference IDs
        List<String> referenceIds = new ArrayList<>();
        referenceIds.add("Reference1");
        referenceIds.add("Reference2");
        referenceIds.add("Reference3");

        // Create a list of request IDs
        List<String> requestIds = new ArrayList<>();
        requestIds.add("Request1");
        requestIds.add("Request2");
        requestIds.add("Request3");

        // Set the lists in the GlobalSearchResponse object
        response.setReference(referenceIds);
        response.setRequestId(requestIds);

        return response;
    }

    public static void main(String[] args) {
        // Create a dummy GlobalSearchResponse object
        GlobalSearchResponse dummyResponse = createDummyGlobalSearchResponse();

        // Print the object to see the dummy data
        System.out.println(dummyResponse);
    }
}

========================
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class YourServiceTest {

    @InjectMocks
    private YourService yourService;

    @Mock
    private EmailMessageExtractionRepository emailMessageExtractionRepository;

    @Mock
    private EmailMessageTPMRequestRepository emailMessageTPMRequestRepository;

    @Mock
    private Logger logger;

    @Test
    public void testGetGlobalSearchWithValidData() {
        // Arrange
        String globalId = "123";
        UUID uuid = UUID.randomUUID();

        List<String> referenceIdResult = new ArrayList<>();
        referenceIdResult.add("Reference1");
        List<String> requestIdResult = new ArrayList<>();
        requestIdResult.add("Request1");

        when(emailMessageExtractionRepository.findByReferenceId(globalId)).thenReturn(referenceIdResult);
        when(emailMessageTPMRequestRepository.findByRequestIdPartialMatch(globalId)).thenReturn(requestIdResult);

        // Act
        GlobalSearchResponse response = yourService.getGlobalSearch(globalId, uuid);

        // Assert
        assertNotNull(response);
        assertEquals(referenceIdResult, response.getReference());
        assertEquals(requestIdResult, response.getRequestId());
    }

    @Test
    public void testGetGlobalSearchWithException() {
        // Arrange
        String globalId = "123";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionRepository.findByReferenceId(globalId)).thenThrow(new RuntimeException("Simulated Exception"));

        // Act
        GlobalSearchResponse response = yourService.getGlobalSearch(globalId, uuid);

        // Assert
        assertNull(response);
    }
}

---
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class YourControllerImplTest {

    @InjectMocks
    private YourControllerImpl yourController;

    @Mock
    private YourService yourService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGlobalSearchWithValidData() {
        // Arrange
        String globalId = "123";
        UUID uuid = UUID.randomUUID();

        GlobalSearchResponse expectedResponse = new GlobalSearchResponse();
        List<String> referenceIdResult = new ArrayList<>();
        referenceIdResult.add("Reference1");
        List<String> requestIdResult = new ArrayList<>();
        requestIdResult.add("Request1");
        expectedResponse.setReference(referenceIdResult);
        expectedResponse.setRequestId(requestIdResult);

        when(yourService.getGlobalSearch(globalId, uuid)).thenReturn(expectedResponse);

        // Act
        ResponseEntity<GlobalSearchResponse> responseEntity = yourController.globalSearch(globalId, uuid);

        // Assert
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        GlobalSearchResponse response = responseEntity.getBody();
        assertNotNull(response);
        assertEquals(expectedResponse, response);
    }

    @Test
    public void testGlobalSearchWithException() {
        // Arrange
        String globalId = "123";
        UUID uuid = UUID.randomUUID();

        when(yourService.getGlobalSearch(globalId, uuid)).thenThrow(new RuntimeException("Simulated Exception"));

        // Act
        ResponseEntity<GlobalSearchResponse> responseEntity = yourController.globalSearch(globalId, uuid);

        // Assert
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());
        assertNull(responseEntity.getBody());
    }
}

------------------------------------------
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class YourControllerImplTest {

    @InjectMocks
    private YourControllerImpl yourController;

    @Mock
    private EmailMessageExtractionRepository emailMessageExtractionRepository;

    @Mock
    private EmailMessageTPMRequestRepository emailMessageTPMRequestRepository;

    @Mock
    private Logger logger;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGlobalSearchWithValidData() {
        // Arrange
        String globalId = "123";
        UUID uuid = UUID.randomUUID();

        List<String> referenceIdResult = new ArrayList<>();
        referenceIdResult.add("Reference1");
        List<String> requestIdResult = new ArrayList<>();
        requestIdResult.add("Request1");

        when(emailMessageExtractionRepository.findByReferenceId(globalId)).thenReturn(referenceIdResult);
        when(emailMessageTPMRequestRepository.findByRequestIdPartialMatch(globalId)).thenReturn(requestIdResult);

        // Act
        ResponseEntity<GlobalSearchResponse> responseEntity = yourController.globalSearch(globalId, uuid);

        // Assert
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        GlobalSearchResponse response = responseEntity.getBody();
        assertNotNull(response);
        assertEquals(referenceIdResult, response.getReference());
        assertEquals(requestIdResult, response.getRequestId());
    }

    @Test
    public void testGlobalSearchWithEmptyData() {
        // Arrange
        String globalId = "123";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionRepository.findByReferenceId(globalId)).thenReturn(new ArrayList<>());
        when(emailMessageTPMRequestRepository.findByRequestIdPartialMatch(globalId)).thenReturn(new ArrayList<>());

        // Act
        ResponseEntity<GlobalSearchResponse> responseEntity = yourController.globalSearch(globalId, uuid);

        // Assert
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        GlobalSearchResponse response = responseEntity.getBody();
        assertNotNull(response);
        assertTrue(response.getReference().isEmpty());
        assertTrue(response.getRequestId().isEmpty());
    }

    @Test
    public void testGlobalSearchWithException() {
        // Arrange
        String globalId = "123";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionRepository.findByReferenceId(globalId)).thenThrow(new RuntimeException("Simulated Exception"));

        // Act
        ResponseEntity<GlobalSearchResponse> responseEntity = yourController.globalSearch(globalId, uuid);

        // Assert
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());
        assertNull(responseEntity.getBody());
    }
}
---------------------------


import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class YourControllerImplTest {

    @InjectMocks
    private YourControllerImpl yourController;

    @Mock
    private EmailMessageExtractionRepository emailMessageExtractionRepository;

    @Mock
    private EmailMessageTPMRequestRepository emailMessageTPMRequestRepository;

    @Mock
    private Logger logger;

    @Test
    public void testGetGlobalSearchWithValidData() {
        // Arrange
        String referenceIdOrRequestId = "123";
        UUID uuid = UUID.randomUUID();

        List<String> referenceIdResult = new ArrayList<>();
        referenceIdResult.add("Reference1");
        List<String> requestIdResult = new ArrayList<>();
        requestIdResult.add("Request1");

        when(emailMessageExtractionRepository.findByReferenceId(referenceIdOrRequestId)).thenReturn(referenceIdResult);
        when(emailMessageTPMRequestRepository.findByRequestIdPartialMatch(referenceIdOrRequestId)).thenReturn(requestIdResult);

        // Act
        ResponseEntity<GlobalSearchResponse> responseEntity = yourController.getGlobalSearch(referenceIdOrRequestId, uuid);

        // Assert
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        GlobalSearchResponse response = responseEntity.getBody();
        assertNotNull(response);
        assertEquals(referenceIdResult, response.getReference());
        assertEquals(requestIdResult, response.getRequestId());
    }

    @Test
    public void testGetGlobalSearchWithEmptyData() {
        // Arrange
        String referenceIdOrRequestId = "123";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionRepository.findByReferenceId(referenceIdOrRequestId)).thenReturn(new ArrayList<>());
        when(emailMessageTPMRequestRepository.findByRequestIdPartialMatch(referenceIdOrRequestId)).thenReturn(new ArrayList<>());

        // Act
        ResponseEntity<GlobalSearchResponse> responseEntity = yourController.getGlobalSearch(referenceIdOrRequestId, uuid);

        // Assert
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        GlobalSearchResponse response = responseEntity.getBody();
        assertNotNull(response);
        assertTrue(response.getReference().isEmpty());
        assertTrue(response.getRequestId().isEmpty());
    }

    @Test
    public void testGetGlobalSearchWithException() {
        // Arrange
        String referenceIdOrRequestId = "123";
        UUID uuid = UUID.randomUUID();

        when(emailMessageExtractionRepository.findByReferenceId(referenceIdOrRequestId)).thenThrow(new RuntimeException("Simulated Exception"));

        // Act
        ResponseEntity<GlobalSearchResponse> responseEntity = yourController.getGlobalSearch(referenceIdOrRequestId, uuid);

        // Assert
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());
        assertNull(responseEntity.getBody());
    }
}

