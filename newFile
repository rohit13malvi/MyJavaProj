import org.junit.jupiter.api.Test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class DashBoardProgressTrackerSummaryServiceTest {

    @Test
    public void testCreateProgressTrackerMap() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        // Mocking input parameters
        List<MessagesEntity> searchResponse = new ArrayList<>();
        MessagesEntity messagesEntity1 = new MessagesEntity();
        messagesEntity1.setCreatedDate(LocalDateTime.of(2023, 11, 30, 10, 0));

        MessagesEntity messagesEntity2 = new MessagesEntity();
        messagesEntity2.setCreatedDate(LocalDateTime.of(2023, 11, 30, 12, 0));

        searchResponse.add(messagesEntity1);
        searchResponse.add(messagesEntity2);

        // Get the method using reflection
        Class<?> clazz = DashBoardProgressTrackerSummaryService.class;
        Method method = clazz.getDeclaredMethod("createProgressTrackerMap", List.class);
        method.setAccessible(true); // Make the private method accessible for testing

        // Perform test
        DashBoardProgressTrackerSummaryService progressTrackerService = new DashBoardProgressTrackerSummaryService();
        @SuppressWarnings("unchecked")
        Map<String, Long> result = (Map<String, Long>) method.invoke(progressTrackerService, searchResponse);

        // Assertions
        assertEquals(2, result.size());
        assertEquals(1L, result.get("Nov30")); // Check the count for a specific day
        // Add more assertions as needed
    }
}
000000000
import org.junit.jupiter.api.Test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DashBoardProgressTrackerSummaryServiceTest {

    @Test
    public void testSearchDashBoardProgressTrackerSummary() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        // Mocking necessary dependencies
        EmailMessageSearchRepository emailMessageSearchRepository = mock(EmailMessageSearchRepository.class);
        DashBoardSummaryHandler dashBoardSummaryHandler = mock(DashBoardSummaryHandler.class);
        EmailMessageLabelsRepository emailMessageLabelsRepository = mock(EmailMessageLabelsRepository.class);

        // Mocking input parameters
        String dashBoardStatusSearch = "SomeStatus";
        EmailMessageFilterCriteria emailFilterCriteria = new EmailMessageFilterCriteria();

        // Mocking necessary behavior for the method
        List<MessagesEntity> messagesEntities = new ArrayList<>();
        MessagesEntity mockMessageEntity = new MessagesEntity();
        messagesEntities.add(mockMessageEntity);

        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(messagesEntities);

        // Get the method using reflection
        Class<?> clazz = DashBoardProgressTrackerSummaryService.class;
        Method method = clazz.getDeclaredMethod("searchDashBoardProgressTrackerSummary", String.class, EmailMessageFilterCriteria.class);
        method.setAccessible(true); // Make the private method accessible for testing

        // Perform test
        DashBoardProgressTrackerSummaryService progressTrackerService = new DashBoardProgressTrackerSummaryService();
        progressTrackerService.setEmailMessageSearchRepository(emailMessageSearchRepository);
        progressTrackerService.setDashBoardSummaryHandler(dashBoardSummaryHandler);
        progressTrackerService.setEmailMessageLabelsRepository(emailMessageLabelsRepository);

        @SuppressWarnings("unchecked")
        List<MessagesEntity> result = (List<MessagesEntity>) method.invoke(progressTrackerService, dashBoardStatusSearch, emailFilterCriteria);

        // Assertions
        assertEquals(1, result.size()); // Ensure that the result contains the expected number of messages
        // Add more assertions as needed for the specific behavior of the method
    }
}
00000000000
import org.junit.jupiter.api.Test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DashBoardProgressTrackerSummaryServiceTest {

    @Test
    public void testSearchDashBoardProgressTrackerSummary() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        EmailMessageSearchRepository emailMessageSearchRepository = mock(EmailMessageSearchRepository.class);
        DashBoardSummaryHandler dashBoardSummaryHandler = mock(DashBoardSummaryHandler.class);
        EmailMessageLabelsRepository emailMessageLabelsRepository = mock(EmailMessageLabelsRepository.class);

        String dashBoardStatusSearch = "SomeStatus";
        EmailMessageFilterCriteria emailFilterCriteria = new EmailMessageFilterCriteria();

        List<MessagesEntity> messagesEntities = new ArrayList<>();
        MessagesEntity mockMessageEntity = new MessagesEntity();
        messagesEntities.add(mockMessageEntity);

        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(messagesEntities);

        Class<?> clazz = DashBoardProgressTrackerSummaryService.class;
        Method method = clazz.getDeclaredMethod("searchDashBoardProgressTrackerSummary", String.class, EmailMessageFilterCriteria.class);
        method.setAccessible(true);

        DashBoardProgressTrackerSummaryService progressTrackerService = new DashBoardProgressTrackerSummaryService();

        @SuppressWarnings("unchecked")
        List<MessagesEntity> result = (List<MessagesEntity>) method.invoke(progressTrackerService, dashBoardStatusSearch, emailFilterCriteria);

        assertEquals(1, result.size());
    }
}
-----
import org.junit.jupiter.api.Test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DashBoardProgressTrackerSummaryServiceTest {

    @Test
    public void testSearchDashBoardProgressTrackerSummary() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        EmailMessageSearchRepository emailMessageSearchRepository = mock(EmailMessageSearchRepository.class);
        DashBoardSummaryHandler dashBoardSummaryHandler = mock(DashBoardSummaryHandler.class);
        EmailMessageLabelsRepository emailMessageLabelsRepository = mock(EmailMessageLabelsRepository.class);

        String dashBoardStatusSearch = "SomeStatus";
        EmailMessageFilterCriteria emailFilterCriteria = new EmailMessageFilterCriteria();

        List<MessagesEntity> messagesEntities = new ArrayList<>();
        MessagesEntity mockMessageEntity = new MessagesEntity();
        messagesEntities.add(mockMessageEntity);

        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(messagesEntities);

        DashBoardProgressTrackerSummaryService progressTrackerService = new DashBoardProgressTrackerSummaryService(emailMessageSearchRepository, dashBoardSummaryHandler, emailMessageLabelsRepository);

        Class<?> clazz = DashBoardProgressTrackerSummaryService.class;
        Method method = clazz.getDeclaredMethod("searchDashBoardProgressTrackerSummary", String.class, EmailMessageFilterCriteria.class);
        method.setAccessible(true);

        @SuppressWarnings("unchecked")
        List<MessagesEntity> result = (List<MessagesEntity>) method.invoke(progressTrackerService, dashBoardStatusSearch, emailFilterCriteria);

        assertEquals(1, result.size());
    }
}
-------
// Service class (or a separate package-private class)
class DashBoardProgressTrackerHelper {
    static Map<String, Long> searchDashBoardProgressTrackerSummary(EmailMessageSearchRepository emailMessageSearchRepository, DashBoardSummaryHandler dashBoardSummaryHandler, EmailMessageLabelsRepository emailMessageLabelsRepository, String dashBoardStatusSearch, EmailMessageFilterCriteria emailFilterCriteria) {
        // Method logic as in DashBoardProgressTrackerSummaryService
    }
}

// Test class
public class DashBoardProgressTrackerSummaryServiceTest {

    @Test
    public void testSearchDashBoardProgressTrackerSummary() {
        // Mock dependencies
        EmailMessageSearchRepository emailMessageSearchRepository = mock(EmailMessageSearchRepository.class);
        DashBoardSummaryHandler dashBoardSummaryHandler = mock(DashBoardSummaryHandler.class);
        EmailMessageLabelsRepository emailMessageLabelsRepository = mock(EmailMessageLabelsRepository.class);

        String dashBoardStatusSearch = "SomeStatus";
        EmailMessageFilterCriteria emailFilterCriteria = new EmailMessageFilterCriteria();

        // Perform the test by directly calling the helper method
        Map<String, Long> result = DashBoardProgressTrackerHelper.searchDashBoardProgressTrackerSummary(emailMessageSearchRepository, dashBoardSummaryHandler, emailMessageLabelsRepository, dashBoardStatusSearch, emailFilterCriteria);

        // Assertions and checks for the result
        // assertEquals(...);
    }
}


99999999999999999
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Pageable;

import java.time.Duration;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.CompletableFuture;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;

@SpringBootTest
public class DashBoardProgressTrackerSummaryServiceTest {

    @Mock
    private EmailMessageSearchRepository emailMessageSearchRepository;

    @Mock
    private DashBoardSummaryHandler dashBoardSummaryHandler;

    @Mock
    private EmailMessageLabelsRepository emailMessageLabelsRepository;

    @Mock
    private Logger logger;

    @Autowired
    private DashBoardProgressTrackerSummaryService service;

    @Test
    public void testGetDashBoardProgressTrackerSummary() throws Exception {
        UUID uuid = UUID.randomUUID();
        Pageable pageable = Mockito.mock(Pageable.class);
        EmailMessageFilterCriteria processedEmailFilterCriteria = Mockito.mock(EmailMessageFilterCriteria.class);
        EmailMessageFilterCriteria unProcessedEmailFilterCriteria = Mockito.mock(EmailMessageFilterCriteria.class);

        Map<String, Long> autoProcessedMap = new HashMap<>();
        autoProcessedMap.put("key1", 10L);

        Map<String, Long> unProcessedMap = new HashMap<>();
        unProcessedMap.put("key2", 5L);

        CompletableFuture<Map<String, Long>> autoProcessedFuture = CompletableFuture.completedFuture(autoProcessedMap);
        CompletableFuture<Map<String, Long>> unProcessedFuture = CompletableFuture.completedFuture(unProcessedMap);

        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(new ArrayList<>());
        when(emailMessageLabelsRepository.findAll()).thenReturn(new ArrayList<>());

        when(service.getDashBoardProgressTrackerSummary(any(), any(), any(), any())).thenCallRealMethod();
        when(service.prepareProgressTrackerResponse(any(), any(), any())).thenCallRealMethod();

        // Mocking CompletableFuture methods
        when(CompletableFuture.supplyAsync(any())).thenReturn(autoProcessedFuture).thenReturn(unProcessedFuture);
        CompletableFuture<Void> combinedProgressTrackerFuture = CompletableFuture.runAsync(() -> {});

        when(CompletableFuture.allOf(autoProcessedFuture, unProcessedFuture)).thenReturn(combinedProgressTrackerFuture);

        // Method invocation
        Map<String, Map<String, Long>> result = service.getDashBoardProgressTrackerSummary(uuid, pageable, processedEmailFilterCriteria, unProcessedEmailFilterCriteria);

        // Assertions and verifications
        assertEquals(2, result.size());
        Mockito.verify(logger).info(anyString(), any(), anyLong());
        Mockito.verify(logger).error(anyString(), any(), anyString());
    }
}
]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Pageable;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@SpringBootTest
public class DashBoardProgressTrackerSummaryServiceTest {

    @Mock
    private EmailMessageSearchRepository emailMessageSearchRepository;

    @Mock
    private DashBoardSummaryHandler dashBoardSummaryHandler;

    @Mock
    private EmailMessageLabelsRepository emailMessageLabelsRepository;

    @Mock
    private Logger logger;

    @InjectMocks
    private DashBoardProgressTrackerSummaryService service;

    @Test
    public void testGetDashBoardProgressTrackerSummary() {
        UUID uuid = UUID.randomUUID();
        Pageable pageable = Mockito.mock(Pageable.class);
        EmailMessageFilterCriteria processedEmailFilterCriteria = Mockito.mock(EmailMessageFilterCriteria.class);
        EmailMessageFilterCriteria unProcessedEmailFilterCriteria = Mockito.mock(EmailMessageFilterCriteria.class);

        // Mocking behavior of internal methods
        Map<String, Long> autoProcessedMap = new HashMap<>();
        autoProcessedMap.put("key1", 10L);

        Map<String, Long> unProcessedMap = new HashMap<>();
        unProcessedMap.put("key2", 5L);

        // Mocking the behavior of external dependencies
        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(new ArrayList<>());
        when(emailMessageLabelsRepository.findAll()).thenReturn(new ArrayList<>());

        // Method invocation
        Map<String, Map<String, Long>> result = service.getDashBoardProgressTrackerSummary(uuid, pageable, processedEmailFilterCriteria, unProcessedEmailFilterCriteria);

        // Assertions and verifications
        assertEquals(2, result.size());
        Mockito.verify(logger).info(anyString(), any(), anyLong());
        Mockito.verify(logger).error(anyString(), any(), anyString());
    }
}

-===========
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Pageable;

import java.time.Duration;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.CompletableFuture;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@SpringBootTest
public class DashBoardProgressTrackerSummaryServiceTest {

    @Mock
    private EmailMessageSearchRepository emailMessageSearchRepository;

    @Mock
    private DashBoardSummaryHandler dashBoardSummaryHandler;

    @Mock
    private EmailMessageLabelsRepository emailMessageLabelsRepository;

    @Mock
    private Logger logger;

    @InjectMocks
    private DashBoardProgressTrackerSummaryService service;

    @Test
    public void testGetDashBoardProgressTrackerSummary() throws Exception {
        UUID uuid = UUID.randomUUID();
        Pageable pageable = Mockito.mock(Pageable.class);
        EmailMessageFilterCriteria processedEmailFilterCriteria = Mockito.mock(EmailMessageFilterCriteria.class);
        EmailMessageFilterCriteria unProcessedEmailFilterCriteria = Mockito.mock(EmailMessageFilterCriteria.class);

        Map<String, Long> autoProcessedMap = new HashMap<>();
        autoProcessedMap.put("key1", 10L);

        Map<String, Long> unProcessedMap = new HashMap<>();
        unProcessedMap.put("key2", 5L);

        when(service.searchDashBoardProgressTrackerSummary(any(), any())).thenReturn(autoProcessedMap, unProcessedMap);
        when(service.prepareProgressTrackerResponse(any(), any(), any())).thenReturn(new HashMap<>());

        Map<String, Map<String, Long>> result = service.getDashBoardProgressTrackerSummary(uuid, pageable, processedEmailFilterCriteria, unProcessedEmailFilterCriteria);

        assertEquals(2, result.size());
        Mockito.verify(logger).info(anyString(), any(), any());
        Mockito.verify(logger, Mockito.never()).error(anyString(), any(), any());
    }

    // Other test cases for the private methods...
}

aaaaaaaaaaaaaaaaaaa
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Pageable;
import org.springframework.test.util.ReflectionTestUtils;

import java.time.Duration;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.CompletableFuture;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@SpringBootTest
public class DashBoardProgressTrackerSummaryServiceTest {

    @Mock
    private EmailMessageSearchRepository emailMessageSearchRepository;

    @Mock
    private DashBoardSummaryHandler dashBoardSummaryHandler;

    @Mock
    private EmailMessageLabelsRepository emailMessageLabelsRepository;

    @Mock
    private Logger logger;

    @InjectMocks
    private DashBoardProgressTrackerSummaryService service;

    @Test
    public void testGetDashBoardProgressTrackerSummary() throws Exception {
        UUID uuid = UUID.randomUUID();
        Pageable pageable = Mockito.mock(Pageable.class);
        EmailMessageFilterCriteria processedEmailFilterCriteria = Mockito.mock(EmailMessageFilterCriteria.class);
        EmailMessageFilterCriteria unProcessedEmailFilterCriteria = Mockito.mock(EmailMessageFilterCriteria.class);

        Map<String, Long> autoProcessedMap = new HashMap<>();
        autoProcessedMap.put("key1", 10L);

        Map<String, Long> unProcessedMap = new HashMap<>();
        unProcessedMap.put("key2", 5L);

        // Mocking the private methods indirectly using ReflectionTestUtils
        ReflectionTestUtils.setField(service, "emailMessageSearchRepository", emailMessageSearchRepository);
        ReflectionTestUtils.setField(service, "dashBoardSummaryHandler", dashBoardSummaryHandler);
        ReflectionTestUtils.setField(service, "emailMessageLabelsRepository", emailMessageLabelsRepository);

        Map<String, Long> resultAuto = invokePrivateMethod(service, "searchDashBoardProgressTrackerSummary", SearchConstants.AUTOMATICALLY_PROCESSED, processedEmailFilterCriteria);
        Map<String, Long> resultUnprocessed = invokePrivateMethod(service, "searchDashBoardProgressTrackerSummary", SearchConstants.UNPROCESSED, unProcessedEmailFilterCriteria);

        when(service.prepareProgressTrackerResponse(any(), any(), any())).thenReturn(new HashMap<>());

        Map<String, Map<String, Long>> result = service.getDashBoardProgressTrackerSummary(uuid, pageable, processedEmailFilterCriteria, unProcessedEmailFilterCriteria);

        assertEquals(2, result.size());
        Mockito.verify(logger).info(anyString(), any(), any());
        Mockito.verify(logger, Mockito.never()).error(anyString(), any(), any());
    }

    private Map<String, Long> invokePrivateMethod(Object object, String methodName, Object... args) throws Exception {
        Class<?>[] argClasses = new Class[args.length];
        for (int i = 0; i < args.length; i++) {
            argClasses[i] = args[i].getClass();
        }
        java.lang.reflect.Method method = object.getClass().getDeclaredMethod(methodName, argClasses);
        method.setAccessible(true);
        return (Map<String, Long>) method.invoke(object, args);
    }
}

dkkkkkkkkkkkkkkkkkkkkkkkkkk
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@SpringBootTest
public class DashBoardProgressTrackerSummaryServiceTest {

    // ... (Other mocked dependencies)

    @Mock
    private Logger logger;

    @InjectMocks
    private DashBoardProgressTrackerSummaryService service;

    @Test
    public void testGetDashBoardProgressTrackerSummary() throws Exception {
        // ... (Same setup as before)

        // Mocking the private methods indirectly using ReflectionTestUtils
        ReflectionTestUtils.setField(service, "emailMessageSearchRepository", emailMessageSearchRepository);
        ReflectionTestUtils.setField(service, "dashBoardSummaryHandler", dashBoardSummaryHandler);
        ReflectionTestUtils.setField(service, "emailMessageLabelsRepository", emailMessageLabelsRepository);

        Map<String, Long> autoProcessedMap = new HashMap<>();
        autoProcessedMap.put("key1", 10L);

        Map<String, Long> unProcessedMap = new HashMap<>();
        unProcessedMap.put("key2", 5L);

        when(service.prepareProgressTrackerResponse(any(), any(), any())).thenCallRealMethod();

        // Access and test the private method
        Set<String> keys = new HashSet<>(Arrays.asList("key1", "key2"));
        Map<String, Map<String, Long>> result = invokePrivateMethod(service, "prepareProgressTrackerResponse", keys, autoProcessedMap, unProcessedMap);

        assertEquals(2, result.size());
        Mockito.verify(logger).info(anyString(), any(), any());
        Mockito.verify(logger, Mockito.never()).error(anyString(), any(), any());
    }

    private Map<String, Map<String, Long>> invokePrivateMethod(Object object, String methodName, Object... args) throws Exception {
        Class<?>[] argClasses = new Class[args.length];
        for (int i = 0; i < args.length; i++) {
            argClasses[i] = args[i].getClass();
        }
        java.lang.reflect.Method method = object.getClass().getDeclaredMethod(methodName, argClasses);
        method.setAccessible(true);
        return (Map<String, Map<String, Long>>) method.invoke(object, args);
    }
}
