import org.junit.jupiter.api.Test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class DashBoardProgressTrackerSummaryServiceTest {

    @Test
    public void testCreateProgressTrackerMap() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        // Mocking input parameters
        List<MessagesEntity> searchResponse = new ArrayList<>();
        MessagesEntity messagesEntity1 = new MessagesEntity();
        messagesEntity1.setCreatedDate(LocalDateTime.of(2023, 11, 30, 10, 0));

        MessagesEntity messagesEntity2 = new MessagesEntity();
        messagesEntity2.setCreatedDate(LocalDateTime.of(2023, 11, 30, 12, 0));

        searchResponse.add(messagesEntity1);
        searchResponse.add(messagesEntity2);

        // Get the method using reflection
        Class<?> clazz = DashBoardProgressTrackerSummaryService.class;
        Method method = clazz.getDeclaredMethod("createProgressTrackerMap", List.class);
        method.setAccessible(true); // Make the private method accessible for testing

        // Perform test
        DashBoardProgressTrackerSummaryService progressTrackerService = new DashBoardProgressTrackerSummaryService();
        @SuppressWarnings("unchecked")
        Map<String, Long> result = (Map<String, Long>) method.invoke(progressTrackerService, searchResponse);

        // Assertions
        assertEquals(2, result.size());
        assertEquals(1L, result.get("Nov30")); // Check the count for a specific day
        // Add more assertions as needed
    }
}
000000000
import org.junit.jupiter.api.Test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DashBoardProgressTrackerSummaryServiceTest {

    @Test
    public void testSearchDashBoardProgressTrackerSummary() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        // Mocking necessary dependencies
        EmailMessageSearchRepository emailMessageSearchRepository = mock(EmailMessageSearchRepository.class);
        DashBoardSummaryHandler dashBoardSummaryHandler = mock(DashBoardSummaryHandler.class);
        EmailMessageLabelsRepository emailMessageLabelsRepository = mock(EmailMessageLabelsRepository.class);

        // Mocking input parameters
        String dashBoardStatusSearch = "SomeStatus";
        EmailMessageFilterCriteria emailFilterCriteria = new EmailMessageFilterCriteria();

        // Mocking necessary behavior for the method
        List<MessagesEntity> messagesEntities = new ArrayList<>();
        MessagesEntity mockMessageEntity = new MessagesEntity();
        messagesEntities.add(mockMessageEntity);

        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(messagesEntities);

        // Get the method using reflection
        Class<?> clazz = DashBoardProgressTrackerSummaryService.class;
        Method method = clazz.getDeclaredMethod("searchDashBoardProgressTrackerSummary", String.class, EmailMessageFilterCriteria.class);
        method.setAccessible(true); // Make the private method accessible for testing

        // Perform test
        DashBoardProgressTrackerSummaryService progressTrackerService = new DashBoardProgressTrackerSummaryService();
        progressTrackerService.setEmailMessageSearchRepository(emailMessageSearchRepository);
        progressTrackerService.setDashBoardSummaryHandler(dashBoardSummaryHandler);
        progressTrackerService.setEmailMessageLabelsRepository(emailMessageLabelsRepository);

        @SuppressWarnings("unchecked")
        List<MessagesEntity> result = (List<MessagesEntity>) method.invoke(progressTrackerService, dashBoardStatusSearch, emailFilterCriteria);

        // Assertions
        assertEquals(1, result.size()); // Ensure that the result contains the expected number of messages
        // Add more assertions as needed for the specific behavior of the method
    }
}
00000000000
import org.junit.jupiter.api.Test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DashBoardProgressTrackerSummaryServiceTest {

    @Test
    public void testSearchDashBoardProgressTrackerSummary() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        EmailMessageSearchRepository emailMessageSearchRepository = mock(EmailMessageSearchRepository.class);
        DashBoardSummaryHandler dashBoardSummaryHandler = mock(DashBoardSummaryHandler.class);
        EmailMessageLabelsRepository emailMessageLabelsRepository = mock(EmailMessageLabelsRepository.class);

        String dashBoardStatusSearch = "SomeStatus";
        EmailMessageFilterCriteria emailFilterCriteria = new EmailMessageFilterCriteria();

        List<MessagesEntity> messagesEntities = new ArrayList<>();
        MessagesEntity mockMessageEntity = new MessagesEntity();
        messagesEntities.add(mockMessageEntity);

        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(messagesEntities);

        Class<?> clazz = DashBoardProgressTrackerSummaryService.class;
        Method method = clazz.getDeclaredMethod("searchDashBoardProgressTrackerSummary", String.class, EmailMessageFilterCriteria.class);
        method.setAccessible(true);

        DashBoardProgressTrackerSummaryService progressTrackerService = new DashBoardProgressTrackerSummaryService();

        @SuppressWarnings("unchecked")
        List<MessagesEntity> result = (List<MessagesEntity>) method.invoke(progressTrackerService, dashBoardStatusSearch, emailFilterCriteria);

        assertEquals(1, result.size());
    }
}
-----
import org.junit.jupiter.api.Test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DashBoardProgressTrackerSummaryServiceTest {

    @Test
    public void testSearchDashBoardProgressTrackerSummary() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        EmailMessageSearchRepository emailMessageSearchRepository = mock(EmailMessageSearchRepository.class);
        DashBoardSummaryHandler dashBoardSummaryHandler = mock(DashBoardSummaryHandler.class);
        EmailMessageLabelsRepository emailMessageLabelsRepository = mock(EmailMessageLabelsRepository.class);

        String dashBoardStatusSearch = "SomeStatus";
        EmailMessageFilterCriteria emailFilterCriteria = new EmailMessageFilterCriteria();

        List<MessagesEntity> messagesEntities = new ArrayList<>();
        MessagesEntity mockMessageEntity = new MessagesEntity();
        messagesEntities.add(mockMessageEntity);

        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(messagesEntities);

        DashBoardProgressTrackerSummaryService progressTrackerService = new DashBoardProgressTrackerSummaryService(emailMessageSearchRepository, dashBoardSummaryHandler, emailMessageLabelsRepository);

        Class<?> clazz = DashBoardProgressTrackerSummaryService.class;
        Method method = clazz.getDeclaredMethod("searchDashBoardProgressTrackerSummary", String.class, EmailMessageFilterCriteria.class);
        method.setAccessible(true);

        @SuppressWarnings("unchecked")
        List<MessagesEntity> result = (List<MessagesEntity>) method.invoke(progressTrackerService, dashBoardStatusSearch, emailFilterCriteria);

        assertEquals(1, result.size());
    }
}
-------
// Service class (or a separate package-private class)
class DashBoardProgressTrackerHelper {
    static Map<String, Long> searchDashBoardProgressTrackerSummary(EmailMessageSearchRepository emailMessageSearchRepository, DashBoardSummaryHandler dashBoardSummaryHandler, EmailMessageLabelsRepository emailMessageLabelsRepository, String dashBoardStatusSearch, EmailMessageFilterCriteria emailFilterCriteria) {
        // Method logic as in DashBoardProgressTrackerSummaryService
    }
}

// Test class
public class DashBoardProgressTrackerSummaryServiceTest {

    @Test
    public void testSearchDashBoardProgressTrackerSummary() {
        // Mock dependencies
        EmailMessageSearchRepository emailMessageSearchRepository = mock(EmailMessageSearchRepository.class);
        DashBoardSummaryHandler dashBoardSummaryHandler = mock(DashBoardSummaryHandler.class);
        EmailMessageLabelsRepository emailMessageLabelsRepository = mock(EmailMessageLabelsRepository.class);

        String dashBoardStatusSearch = "SomeStatus";
        EmailMessageFilterCriteria emailFilterCriteria = new EmailMessageFilterCriteria();

        // Perform the test by directly calling the helper method
        Map<String, Long> result = DashBoardProgressTrackerHelper.searchDashBoardProgressTrackerSummary(emailMessageSearchRepository, dashBoardSummaryHandler, emailMessageLabelsRepository, dashBoardStatusSearch, emailFilterCriteria);

        // Assertions and checks for the result
        // assertEquals(...);
    }
}


