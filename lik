https://www.google.com/url?q=https://verizon.webex.com/verizon/j.php?MTID%3Dm6986db55d5ca17720ffaf01343a95a19&sa=D&source=calendar&ust=1701181931299489&usg=AOvVaw0LKrqggL_7V2DgQc5quQZY

https://www.google.com/url?q=https://verizon.webex.com/verizon/j.php?MTID%3Dm83042920fce8ce0b7cbd4ccb666d433d&sa=D&source=calendar&ust=1700919251131761&usg=AOvVaw0rvqdMtVkUxa9KkGIs1U_2

mani
https://verizon.webex.com/verizon/j.php?MTID=m17a78264fac59af47db0e8176c82a186
------------------
private void addEmailMessageExtractionProcessRecord(EditAttributesDTO editAttributesDTO, int emailMessageExtractionId, UUID uuid) {
        try {
            LOGGER.info("addEmailMessageExtractionProcessRecord::adding a email message extraction process record editAttributesDTO:{},emailMessageExtractionId:{}, uuid={},",editAttributesDTO,emailMessageExtractionId,uuid);
            if (editAttributesDTO.getProcessStartTime() != null && editAttributesDTO.getProcessEndTime() != null) {
                EmailMessageExtractionProcess emailMessageExtractionProcess = new EmailMessageExtractionProcess();
                emailMessageExtractionProcess.setStartTime(editAttributesDTO.getProcessStartTime());
                emailMessageExtractionProcess.setEndTime(editAttributesDTO.getProcessEndTime());
                emailMessageExtractionProcess.setEmailMessageExtractionId(emailMessageExtractionId);
                emailMessageExtractionProcess.setCreatedBy(editAttributesDTO.getModifiedBy());
                emailMessageExtractionProcess.setCreatedDate(editAttributesDTO.getModifiedDate());
                emailMessageExtractionProcessRepository.save(emailMessageExtractionProcess);
                LOGGER.info("addEmailMessageExtractionProcessRecord::Added a email message extraction process record emailMessageExtractionProcess:{},emailMessageExtractionId:{}, uuid={},",emailMessageExtractionProcess,emailMessageExtractionId,uuid);
            }
        }catch (Exception e){
            LOGGER.error("addEmailMessageExtractionProcessRecord::Exception while adding email message extraction process record editAttributesDTO:{},emailMessageExtractionId:{}, uuid={},Exception:{}",editAttributesDTO,emailMessageExtractionId,uuid,e);
        }
    }
---------------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.junit.jupiter.api.BeforeEach;

import java.util.UUID;

public class YourTestClass {

    @Mock
    private EmailMessageExtractionProcessRepository emailMessageExtractionProcessRepository;

    @Mock
    private Logger logger;

    @InjectMocks
    private YourClassContainingMethod yourClassContainingMethod;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testAddEmailMessageExtractionProcessRecord_WithException() {
        // Prepare test data
        EditAttributesDTO editAttributesDTO = new EditAttributesDTO();
        editAttributesDTO.setProcessStartTime("startTime");
        editAttributesDTO.setProcessEndTime("endTime");
        int emailMessageExtractionId = 123;
        UUID uuid = UUID.randomUUID();

        // Mock repository save to throw an exception
        Mockito.doThrow(RuntimeException.class).when(emailMessageExtractionProcessRepository).save(Mockito.any());

        // Call the method
        yourClassContainingMethod.addEmailMessageExtractionProcessRecord(editAttributesDTO, emailMessageExtractionId, uuid);

        // Verify that the logger.error() method was called with the expected parameters
        Mockito.verify(logger).error("addEmailMessageExtractionProcessRecord::Exception while adding email message extraction process record editAttributesDTO:{},emailMessageExtractionId:{}, uuid={},Exception:{}",
            editAttributesDTO, emailMessageExtractionId, uuid, Mockito.any(RuntimeException.class));
    }

    // Add other test cases as per different scenarios
}
---------------
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;

import java.util.UUID;

public class YourTestClass {

    @Mock
    private EmailMessageExtractionProcessRepository emailMessageExtractionProcessRepository;

    @Mock
    private Logger logger;

    @InjectMocks
    private YourClassContainingMethod yourClassContainingMethod;

    @Test
    public void testAddEmailMessageExtractionProcessRecord_ExceptionHandling() {
        // Prepare test data
        EditAttributesDTO editAttributesDTO = new EditAttributesDTO();
        editAttributesDTO.setProcessStartTime("startTime");
        editAttributesDTO.setProcessEndTime("endTime");
        int emailMessageExtractionId = 123;
        UUID uuid = UUID.randomUUID();

        // Mock repository save to throw an exception
        Mockito.when(emailMessageExtractionProcessRepository.save(Mockito.any()))
               .thenThrow(new RuntimeException("Repository save failed"));

        // Call the method
        yourClassContainingMethod.addEmailMessageExtractionProcessRecord(editAttributesDTO, emailMessageExtractionId, uuid);

        // Verify that the logger.error() method was called with the expected parameters
        Mockito.verify(logger).error("addEmailMessageExtractionProcessRecord::Exception while adding email message extraction process record editAttributesDTO:{},emailMessageExtractionId:{}, uuid={},Exception:{}",
                editAttributesDTO, emailMessageExtractionId, uuid, Mockito.any(RuntimeException.class));
    }
}
