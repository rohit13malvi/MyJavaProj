
select request_id from ucmcmt.email_message_tpm_request
ucmcmt.email_message_tpm_request
ucmcmt.tpm_request_network_elements/*not requested*/
select * from ucmcmt.email_message_extraction
select reference_id from ucmcmt.email_message_extraction where 

select * from ucmcmt.email_message_extraction
select * from ucmcmt.email_message_extraction 
 where reference_id ='92832323'

select * from ucmcmt.email_message_extraction where email_message_extraction_id=140
request_id
select * from ucmcmt.email_message_tpm_request where request_id in (34,87) and email_message_extraction_id is not null

select * from ucmcmt.email_message_tpm_request where cast(request_id as text) like '8%'

select * from ucmcmt.party where id=140 where party_name = 'crown castle'

select * from ucmcmt.email_messages where email_me

select reference_id from ucmcmt.email_message_extraction where reference_id Like '8%'

select * from ucmcmt.email_extraction_mapping
--------------------
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID; 
import java.util.Optional;

class ControllerTest {

    @Test
    void globalSearchTest() {
        // Create a mock of the EmailMessageExtractionService
        EmailMessageExtractionService emailMessageExtractionService = Mockito.mock(EmailMessageExtractionService.class);

        // Create an instance of the Controller and inject the mock service
        Controller controller = new Controller(emailMessageExtractionService);

        // Define the expected response when getGlobalSearch is called on the mock service
        GlobalsearchResponse expectedResponse = new GlobalsearchResponse();
        List<String> expectedStrings = new ArrayList<>();
        expectedStrings.add("String1");
        expectedResponse.setStrings(expectedStrings);
        List<Integer> expectedIntegers = new ArrayList<>();
        expectedIntegers.add(1);
        expectedResponse.setIntegers(expectedIntegers);
        
        // Mock the behavior of the emailMessageExtractionService.getGlobalSearch method
        Mockito.when(emailMessageExtractionService.getGlobalSearch(Mockito.anyString(), Mockito.any(UUID.class)))
               .thenReturn(expectedResponse);

        // Call the globalSearch method
        ResponseEntity<GlobalsearchResponse> responseEntity = controller.globalSearch("idValue", UUID.randomUUID());

        // Assert the response
        assert responseEntity.getStatusCode() == HttpStatus.OK;
        assert responseEntity.getBody() != null;
        assert responseEntity.getBody().getStrings().contains("String1");
        assert responseEntity.getBody().getIntegers().contains(1);
    }


---------------------
@Test
public void testGlobalSearchWithValidInput() {
    // Arrange
    EmailMessageExtractionService emailService = Mockito.mock(EmailMessageExtractionService.class);
    Controller controller = new Controller(emailService);
    GlobalsearchResponse expectedResponse = new GlobalsearchResponse();
    Mockito.when(emailService.getGlobalSearch(Mockito.anyString(), Mockito.any(UUID.class)))
           .thenReturn(expectedResponse);

    // Act
    ResponseEntity<GlobalsearchResponse> responseEntity = controller.globalSearch("idValue", UUID.randomUUID());

    // Assert
    Assert.assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    Assert.assertNotNull(responseEntity.getBody());
}

@Test
public void testGlobalSearchWithException() {
    // Arrange
    EmailMessageExtractionService emailService = Mockito.mock(EmailMessageExtractionService.class);
    Controller controller = new Controller(emailService);
    Mockito.when(emailService.getGlobalSearch(Mockito.anyString(), Mockito.any(UUID.class)))
           .thenThrow(new RuntimeException("Simulated exception"));

    // Act
    ResponseEntity<GlobalsearchResponse> responseEntity = controller.globalSearch("idValue", UUID.randomUUID());

    // Assert
    Assert.assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());
    Assert.assertNotNull(responseEntity.getBody());
}
--------------------------------
@Override
	public ResponseEntity<GlobalSearchResponse> globalSearch(String id, UUID uuid) {
		LOGGER.info("globalSearch: Getting the request id or reference id : referenceIdOrrequestId", id, uuid);
		GlobalSearchResponse globalSearchResponse = new GlobalSearchResponse();
		try {
			globalSearchResponse = emailMessageExtractionService.getGlobalSearch(id, uuid);
		} catch (Exception exe) {
			LOGGER.error("exception in emailMessageExtraction method where referenceIdOrrequestId =", id, "Exception =", exe, uuid);
			return new ResponseEntity<>(globalSearchResponse, HttpStatus.NO_CONTENT);
		}
		if (Optional.ofNullable(globalSearchResponse).isPresent()) {
			return new ResponseEntity<>(globalSearchResponse, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(globalSearchResponse, HttpStatus.NO_CONTENT);
		}
	}
-----------------
 @PreAuthorize(KirkeAuthorization.USER)
    @RequestMapping(value = "/email-messages/globalSearch/{globalId}", produces = {"application/json"}, method = RequestMethod.GET)
    default ResponseEntity<GlobalSearchResponse> globalSearch(@ApiParam(value = "Universal search searching a reference id and request id based on input. it will display requestedId or requestId.", required = true) @Valid @PathVariable("globalId") String globalId,@RequestHeader("UUID") UUID uuid){
        return new ResponseEntity<GlobalSearchResponse>(HttpStatus.OK);
    }
--------------------
  public GlobalSearchResponse getGlobalSearch(String referenceIdOrrequestId, UUID uuid) {
        List<String> listOfReferenceId = new ArrayList<>();
        List<String> listOfRequestId = new ArrayList<>();
        GlobalSearchResponse globalSearchResponse = new GlobalSearchResponse();
        try {
            listOfReferenceId = emailMessageExtractionRepository.findByReferenceId(referenceIdOrrequestId);
            listOfRequestId = emailMessageTPMRequestRepository.findByRequestIdPartialMatch(referenceIdOrrequestId);
           if(Optional.ofNullable(listOfReferenceId).isPresent()||Optional.ofNullable(listOfRequestId).isPresent()){
            globalSearchResponse.setReference(listOfReferenceId);
            globalSearchResponse.setRequestId(listOfRequestId);
            }
            LOGGER.info("global search response data =", globalSearchResponse, uuid);
        } catch (Exception exe) {
            LOGGER.error("getGlobalSearch: error while filtering the refrence id request id records" + exe,uuid);
            exe.printStackTrace();
            return null;
        }
        return globalSearchResponse;
    }
---
@Query(value="select reference_id from ucmcmt.email_message_extraction where reference_id Like (:id%)", nativeQuery = true)
public List<String> findByReferenceId(@Param("id") String id);
---
            listOfRequestId = emailMessageTPMRequestRepository.findByRequestIdPartialMatch(referenceIdOrrequestId);
----------------------
@Query(value = "select request_id from ucmcmt.email_message_tpm_request where cast(request_id as text) like" +
            " :id%", nativeQuery = true)
    public List<String> findByRequestIdPartialMatch(@Param("id") String id);
-----
package com.verizon.ucm.interactionmanagement.response;

import java.util.List;

public class GlobalSearchResponse {
private List<String> reference;
private List<String> requestId;

    public List<String> getReference() {
        return reference;
    }

    public void setReference(List<String> reference) {
        this.reference = reference;
    }

    public List<String> getRequestId() {
        return requestId;
    }

    public void setRequestId(List<String> requestId) {
        this.requestId = requestId;
    }

    @Override
    public String toString() {
        return "GlobalSearchResponse{" +
                "reference=" + reference +
                ", requestId=" + requestId +
                '}';
    }
}

