package com.verizon.ucm.interactionmanagement.services.search.emailmessages;

import java.time.Duration;
import java.time.Instant;
import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.verizon.ucm.interactionmanagement.entity.MessagesEntity;
import com.verizon.ucm.interactionmanagement.enums.DashBoardMyTasklistSearchEnum;
import com.verizon.ucm.interactionmanagement.handler.DashBoardSummaryHandler;
import com.verizon.ucm.interactionmanagement.repository.EmailMessageLabelsRepository;
import com.verizon.ucm.interactionmanagement.repository.EmailMessageSearchRepository;
import com.verizon.ucm.interactionmanagement.response.dashboard.MyTaskListResponse;
import com.verizon.ucm.interactionmanagement.specifications.EmailMessageFilterCriteria;
import com.verizon.ucm.interactionmanagement.specifications.EmailMessageSearchSpecification;
import com.verizon.ucm.interactionmanagement.util.SearchConstants;
import com.verizon.ucm.interactionmanagement.specifications.EmailMessageSearchCriteria; 

@Service
public class DashBoardMyTasklistService {

	private static final Logger LOGGER = LoggerFactory.getLogger(DashBoardMyTasklistService.class);

	@Autowired
	private EmailMessageSearchRepository emailMessageSearchRepository;

	@Autowired
	private DashBoardSummaryHandler dashBoardSummaryHandler;
	
	@Autowired
	private EmailMessageLabelsRepository emailMessageLabelsRepository;

	public MyTaskListResponse getDashBoardMyTaskListSummary(UUID uuid, Pageable page, String userName,String vzid,
			EmailMessageFilterCriteria processedemailCriteria, EmailMessageFilterCriteria unProcessedemailCriteria) {

		LOGGER.info("DashBoardInboxSummaryService# getDashBoardInboxSummary#: inside getDashBoardInboxSummary: uuid={}",
				uuid);
		MyTaskListResponse myTaskListResponse = new MyTaskListResponse();

		try {
			Instant startTime = Instant.now();
			EmailMessageSearchCriteria emailMessageSearchCriteria = new EmailMessageSearchCriteria();
			DashBoardMyTasklistSearchEnum[] dashBoardMyTaskListSearchvalues = DashBoardMyTasklistSearchEnum.values();

			for (DashBoardMyTasklistSearchEnum dashBoardMyTaskListSearch : dashBoardMyTaskListSearchvalues) {
				String filterColumn = dashBoardMyTaskListSearch.toString();

				List<EmailMessageFilterCriteria> emailMessageFilterCriteriaList = null;

				if (dashBoardMyTaskListSearch.getSearchKey().equalsIgnoreCase(SearchConstants.MANUALLY_PROCESSED)) {
					emailMessageFilterCriteriaList = dashBoardSummaryHandler.prepareSearchCriteria(dashBoardMyTaskListSearch.getSearchKey(),
							dashBoardMyTaskListSearch.getSearchKey(), processedemailCriteria);
					emailMessageFilterCriteriaList.add(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(
							SearchConstants.LABEL_CREATED_BY, vzid, SearchConstants.EQUALS));
					emailMessageFilterCriteriaList.add(
							dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(SearchConstants.LABEL_AGE,
									SearchConstants.HOURS_168.toString(), SearchConstants.EQUALS));
				} else {
					emailMessageFilterCriteriaList = dashBoardSummaryHandler.prepareSearchCriteria(filterColumn,
							dashBoardMyTaskListSearch.getSearchKey(), unProcessedemailCriteria);
					emailMessageFilterCriteriaList.add(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(
							SearchConstants.LOCKED_BY, userName, SearchConstants.EQUALS));
				}

				emailMessageSearchCriteria.setFilterMeta(emailMessageFilterCriteriaList);
				EmailMessageSearchSpecification spec = new EmailMessageSearchSpecification(emailMessageLabelsRepository,
						emailMessageSearchCriteria);

				Page<MessagesEntity> searchResponse = emailMessageSearchRepository.findAll(spec, page);
				fillMyTasklistResponseObj(myTaskListResponse, searchResponse, filterColumn);
			}
			
			LOGGER.info("DashBoardSummaryService# getDashBoardSummary#:end:successfully prepared MyTaskListResponse dashboard summary for uuid={}, time_taken={}",
					uuid, Duration.between(startTime, Instant.now()).toMillis());
		} catch (Exception e) {
			LOGGER.error(
					"DashBoardInboxSummaryService# getDashBoardInboxSummary#: Exception occurred while building MyTaskListResponse object: uuid={}, exception={}",
					uuid, e.getMessage());
		}

		return myTaskListResponse;
	}

	private void fillMyTasklistResponseObj(MyTaskListResponse myTaskListResponse, Page<MessagesEntity> searchResponse,
			String filterColumn) {
		if (searchResponse != null) {
			Long count = searchResponse.getTotalElements();
			if (filterColumn.equalsIgnoreCase(DashBoardMyTasklistSearchEnum.MANUALLY_PROCESSED.name())) {
				myTaskListResponse.setManuallyProcessedByMeCount(count);
			} else if (filterColumn.equalsIgnoreCase(DashBoardMyTasklistSearchEnum.isLocked.name())) {
				myTaskListResponse.setLockedByMeCount(count);
			} 
		}
	}

}
------------
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.UUID;

import static org.junit.Assert.assertNotNull;
import static org.mockito.ArgumentMatchers.any;

@RunWith(MockitoJUnitRunner.class)
public class DashBoardMyTasklistServiceTest {

    @Mock
    private EmailMessageSearchRepository emailMessageSearchRepository;

    @Mock
    private DashBoardSummaryHandler dashBoardSummaryHandler;

    @Mock
    private EmailMessageLabelsRepository emailMessageLabelsRepository;

    @InjectMocks
    private DashBoardMyTasklistService myTasklistService;

    @Test
    public void testGetDashBoardMyTaskListSummary_Success() {
        Page<MessagesEntity> mockPage = Mockito.mock(Page.class);
        Mockito.when(mockPage.getTotalElements()).thenReturn(10L);

        Mockito.when(emailMessageSearchRepository.findAll(any(), any())).thenReturn(mockPage);

        EmailMessageFilterCriteria processedEmailCriteria = new EmailMessageFilterCriteria();
        EmailMessageFilterCriteria unProcessedEmailCriteria = new EmailMessageFilterCriteria();

        MyTaskListResponse response = myTasklistService.getDashBoardMyTaskListSummary(
                UUID.randomUUID(), Pageable.unpaged(), "userName", "vzid", processedEmailCriteria, unProcessedEmailCriteria);

        assertNotNull(response);
        // Add assertions for the expected response based on mocked data
    }

    @Test
    public void testGetDashBoardMyTaskListSummary_ExceptionHandling() {
        Mockito.when(emailMessageSearchRepository.findAll(any(), any())).thenThrow(new RuntimeException("Test Exception"));

        EmailMessageFilterCriteria processedEmailCriteria = new EmailMessageFilterCriteria();
        EmailMessageFilterCriteria unProcessedEmailCriteria = new EmailMessageFilterCriteria();

        MyTaskListResponse response = myTasklistService.getDashBoardMyTaskListSummary(
                UUID.randomUUID(), Pageable.unpaged(), "userName", "vzid", processedEmailCriteria, unProcessedEmailCriteria);

        // Assertions for expected exception handling
    }

    @Test
    public void testFillMyTasklistResponseObj() {
        MyTaskListResponse myTaskListResponse = new MyTaskListResponse();
        Page<MessagesEntity> mockPage = Mockito.mock(Page.class);
        Mockito.when(mockPage.getTotalElements()).thenReturn(5L);

        myTasklistService.fillMyTasklistResponseObj(myTaskListResponse, mockPage, DashBoardMyTasklistSearchEnum.MANUALLY_PROCESSED.name());

        // Assertions for the filled MyTaskListResponse object
    }
}
