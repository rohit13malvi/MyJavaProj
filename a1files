package com.verizon.ucm.interactionmanagement.services.search.emailmessages;


import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.verizon.ucm.interactionmanagement.entity.MessagesEntity;
import com.verizon.ucm.interactionmanagement.handler.DashBoardSummaryHandler;
import com.verizon.ucm.interactionmanagement.repository.EmailMessageLabelsRepository;
import com.verizon.ucm.interactionmanagement.repository.EmailMessageSearchRepository;
import com.verizon.ucm.interactionmanagement.specifications.EmailMessageFilterCriteria;
import com.verizon.ucm.interactionmanagement.specifications.EmailMessageSearchCriteria;
import com.verizon.ucm.interactionmanagement.specifications.EmailMessageSearchSpecification;
import com.verizon.ucm.interactionmanagement.util.DateTimeConversionUtil;
import com.verizon.ucm.interactionmanagement.util.SearchConstants;

@Service
public class DashBoardProgressTrackerSummaryService {

	private static final Logger LOGGER = LoggerFactory.getLogger(DashBoardProgressTrackerSummaryService.class);

	@Autowired
	private EmailMessageSearchRepository emailMessageSearchRepository;

	@Autowired
	private DashBoardSummaryHandler dashBoardSummaryHandler;
	
	@Autowired
	private EmailMessageLabelsRepository emailMessageLabelsRepository;

	public Map<String, Map<String, Long>> getDashBoardProgressTrackerSummary(UUID uuid, Pageable page,
			EmailMessageFilterCriteria processedEmailFilterCriteria,
			EmailMessageFilterCriteria unProcessedEmailFilterCriteria) {

		LOGGER.info(
				"DashBoardProgressTrackerSummaryService# getDashBoardProgressTrackerSummary#: inside getDashBoardProgressTrackerSummary: uuid={}",
				uuid);
		Map<String, Map<String, Long>> progressTrackerMap = null;

		try {
			Instant startTime = Instant.now();
			
			CompletableFuture<Map<String, Long>> autoProcessedFuture = CompletableFuture
					.supplyAsync(() -> searchDashBoardProgressTrackerSummary(SearchConstants.AUTOMATICALLY_PROCESSED, processedEmailFilterCriteria));
			
			CompletableFuture<Map<String, Long>> unProcessedMapFuture = CompletableFuture
					.supplyAsync(() ->  searchDashBoardProgressTrackerSummary(SearchConstants.UNPROCESSED, unProcessedEmailFilterCriteria));
			
			CompletableFuture<Void> combinedProgressTrackerFuture = CompletableFuture
					.allOf(autoProcessedFuture, unProcessedMapFuture);
			
			combinedProgressTrackerFuture.get();

			Map<String, Long> autoProcessedMap = null;
			if (autoProcessedFuture.isDone()) {
				autoProcessedMap = autoProcessedFuture.get();
			}

			Map<String, Long> unProcessedMap = null;
			if (unProcessedMapFuture.isDone()) {
				unProcessedMap = unProcessedMapFuture.get();
			}

			Set<String> dayMonthKeys = null;
			if ((autoProcessedMap != null && !autoProcessedMap.isEmpty())
					|| (unProcessedMap != null && !unProcessedMap.isEmpty())) {
				dayMonthKeys = new TreeSet<>();
				dayMonthKeys.addAll(autoProcessedMap.keySet());
				dayMonthKeys.addAll(unProcessedMap.keySet());
			}

			if (dayMonthKeys != null && !dayMonthKeys.isEmpty()) {
				progressTrackerMap = prepareProgressTrackerResponse(dayMonthKeys, autoProcessedMap, unProcessedMap);
			}
			
			LOGGER.info("DashBoardSummaryService# getDashBoardSummary#:end:successfully prepared ProgressTracker dashboard summary for uuid={}, time_taken={}",
					uuid, Duration.between(startTime, Instant.now()).toMillis());

		} catch (Exception e) {
			LOGGER.error("DashBoardProgressTrackerSummaryService# getDashBoardProgressTrackerSummary#: Exception occurred while building ProgressTrackerResponse object: uuid={}, exception={}",
					uuid, e.getMessage());
		}

		return progressTrackerMap;
	}
	
	private Map<String, Long> searchDashBoardProgressTrackerSummary(String dashBoardStatusSearch,
			EmailMessageFilterCriteria emailFilterCriteria) {

		EmailMessageSearchCriteria emailMessageSearchCriteria = new EmailMessageSearchCriteria();
		List<EmailMessageFilterCriteria> emailMessageFilterCriteriaList = new ArrayList<>();

		if (SearchConstants.AUTOMATICALLY_PROCESSED.equalsIgnoreCase(dashBoardStatusSearch)) {
			emailMessageFilterCriteriaList.add(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(
					SearchConstants.LABEL_AGE, SearchConstants.HOURS_168.toString(), SearchConstants.EQUALS));
			emailMessageFilterCriteriaList.add(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(
					dashBoardStatusSearch, dashBoardStatusSearch, SearchConstants.EQUALS));
		} else if (SearchConstants.UNPROCESSED.equalsIgnoreCase(dashBoardStatusSearch)) {
			emailMessageFilterCriteriaList.add(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(
					SearchConstants.EMAIL_MESSAGE_AGE, SearchConstants.HOURS_168.toString(), SearchConstants.EQUALS));
		}
		
		emailMessageFilterCriteriaList.add(emailFilterCriteria);
		emailMessageSearchCriteria.setFilterMeta(emailMessageFilterCriteriaList);
		EmailMessageSearchSpecification spec = new EmailMessageSearchSpecification(emailMessageLabelsRepository,
				emailMessageSearchCriteria);

		Instant startTime = Instant.now();
		List<MessagesEntity> messagesEntities = emailMessageSearchRepository.findAll(spec);
		LOGGER.info(
				"DashBoardSummaryService# getDashBoardSummary#:end:successfully prepared ProgressTracker-XXXXXXXXXXXXXXXXXXXXX dashboard summary for time_taken={}",
				Duration.between(startTime, Instant.now()).toMillis());
		return createProgressTrackerMap(messagesEntities);
	}

	private Map<String, Long> createProgressTrackerMap(List<MessagesEntity> searchResponse) {

		Map<String, Long> map = new HashMap<>();
		if (searchResponse != null && !searchResponse.isEmpty()) {
			for (MessagesEntity messagesEntity : searchResponse) {
				String dayMonth = DateTimeConversionUtil.formatLocalDateTime(messagesEntity.getCreatedDate(), "LLLdd");

				if (map.containsKey(dayMonth)) {
					map.put(dayMonth, map.get(dayMonth) + 1);
				} else {
					map.put(dayMonth, 1l);
				}
			}
		}
		return map;
	}
	
	private Map<String, Map<String, Long>> prepareProgressTrackerResponse(Set<String> keys,
			Map<String, Long> autoProcessedMap, Map<String, Long> unProcessedMap) {

		Map<String, Map<String, Long>> map = new LinkedHashMap<>();
		for (String key : keys) {
			if (key != null && !map.containsKey(key)) {
				Map<String, Long> countMap = new HashMap<>();
				countMap.put(SearchConstants.AUTOMATICALLY_PROCESSED, autoProcessedMap.get(key));
				countMap.put(SearchConstants.UNPROCESSED, unProcessedMap.get(key));
				map.put(key, countMap);
			}
		}
		return map;
	}

}
=====
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Pageable;

@ExtendWith(MockitoExtension.class)
public class DashBoardProgressTrackerSummaryServiceTest {

    @Mock
    private EmailMessageSearchRepository emailMessageSearchRepository;

    @Mock
    private DashBoardSummaryHandler dashBoardSummaryHandler;

    @Mock
    private EmailMessageLabelsRepository emailMessageLabelsRepository;

    @InjectMocks
    private DashBoardProgressTrackerSummaryService progressTrackerService;

    private UUID uuid;
    private Pageable pageable;

    @BeforeEach
    public void setup() {
        uuid = UUID.randomUUID();
        pageable = mock(Pageable.class);
    }

    @Test
    public void testGetDashBoardProgressTrackerSummary_Success() throws Exception {
        // Mocking necessary behavior for successful execution
        Map<String, Long> autoProcessedMap = new HashMap<>();
        autoProcessedMap.put("key1", 1L);
        Map<String, Long> unProcessedMap = new HashMap<>();
        unProcessedMap.put("key2", 2L);

        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(new ArrayList<>());
        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(new ArrayList<>());
        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(new ArrayList<>());

        CompletableFuture<Map<String, Long>> autoProcessedFuture = CompletableFuture.completedFuture(autoProcessedMap);
        CompletableFuture<Map<String, Long>> unProcessedMapFuture = CompletableFuture.completedFuture(unProcessedMap);
        CompletableFuture<Void> combinedProgressTrackerFuture = CompletableFuture.allOf(autoProcessedFuture, unProcessedMapFuture);

        when(autoProcessedFuture.get()).thenReturn(autoProcessedMap);
        when(unProcessedMapFuture.get()).thenReturn(unProcessedMap);
        when(combinedProgressTrackerFuture.get()).thenReturn(null);

        // Perform test
        Map<String, Map<String, Long>> result = progressTrackerService.getDashBoardProgressTrackerSummary(uuid, pageable, new EmailMessageFilterCriteria(), new EmailMessageFilterCriteria());

        // Assertions
        // Add assertions based on the expected result from the service method
        // For example:
        assertNotNull(result);
        // Check other conditions as needed
    }

    // Add more test cases for different scenarios
}
===========
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Pageable;

@ExtendWith(MockitoExtension.class)
public class DashBoardProgressTrackerSummaryServiceTest {

    // Existing mocks and injectMocks...

    @Test
    public void testGetDashBoardProgressTrackerSummary_ExceptionHandling() {
        // Mocking necessary behavior for exception handling
        when(emailMessageSearchRepository.findAll(any())).thenThrow(new RuntimeException("Simulating an exception"));

        // Perform test
        Map<String, Map<String, Long>> result = progressTrackerService.getDashBoardProgressTrackerSummary(uuid, pageable, new EmailMessageFilterCriteria(), new EmailMessageFilterCriteria());

        // Assertions for catch block scenario
        assertNull(result); // Assert that the result is null or in an expected state after catching the exception
        // Add assertions or verifications related to the log messages or the behavior in the catch block
        // For example, verify that the LOGGER.error method was called with the expected parameters
    }

    // Other test cases...
}

=====================
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.data.domain.Pageable;

import java.util.UUID;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class DashBoardProgressTrackerSummaryServiceTest {

    private DashBoardProgressTrackerSummaryService progressTrackerService;
    private UUID uuid;
    private Pageable pageable;

    @BeforeEach
    public void setup() {
        progressTrackerService = new DashBoardProgressTrackerSummaryService();
        uuid = UUID.randomUUID();
        pageable = Pageable.unpaged(); // Create a basic Pageable instance
    }

    @Test
    public void testGetDashBoardProgressTrackerSummary_ExceptionHandling() {
        // Perform test with a repository that throws an exception
        Map<String, Map<String, Long>> result = progressTrackerService.getDashBoardProgressTrackerSummary(
                uuid,
                pageable,
                new EmailMessageFilterCriteria(),
                new EmailMessageFilterCriteria()
        );

        // Assertions for catch block scenario
        assertNull(result); // Assert that the result is null after catching the exception

        // You can also assert for specific exception types, e.g., handling RuntimeException
        // For example:
        assertThrows(RuntimeException.class, () -> progressTrackerService.getDashBoardProgressTrackerSummary(
                uuid,
                pageable,
                new EmailMessageFilterCriteria(),
                new EmailMessageFilterCriteria()
        ));
    }

    // Other test cases...
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Pageable;

import java.util.*;
import java.util.concurrent.CompletableFuture;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class DashBoardProgressTrackerSummaryServiceTest {

    @Mock
    private EmailMessageSearchRepository emailMessageSearchRepository;

    @Mock
    private DashBoardSummaryHandler dashBoardSummaryHandler;

    @Mock
    private EmailMessageLabelsRepository emailMessageLabelsRepository;

    @InjectMocks
    private DashBoardProgressTrackerSummaryService progressTrackerService;

    private UUID uuid;
    private Pageable pageable;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        progressTrackerService = new DashBoardProgressTrackerSummaryService();
        uuid = UUID.randomUUID();
        pageable = Pageable.unpaged();
    }

    @Test
    public void testGetDashBoardProgressTrackerSummary_Success() throws Exception {
        // Mocking necessary behavior for successful execution
        Map<String, Long> autoProcessedMap = new HashMap<>();
        autoProcessedMap.put("key1", 1L);
        Map<String, Long> unProcessedMap = new HashMap<>();
        unProcessedMap.put("key2", 2L);

        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(new ArrayList<>());
        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(new ArrayList<>());
        when(dashBoardSummaryHandler.buildEmailMessageFilterCriteriaObj(any(), any(), any())).thenReturn(new EmailMessageFilterCriteria());
        when(emailMessageSearchRepository.findAll(any())).thenReturn(new ArrayList<>());

        CompletableFuture<Map<String, Long>> autoProcessedFuture = CompletableFuture.completedFuture(autoProcessedMap);
        CompletableFuture<Map<String, Long>> unProcessedMapFuture = CompletableFuture.completedFuture(unProcessedMap);
        CompletableFuture<Void> combinedProgressTrackerFuture = CompletableFuture.allOf(autoProcessedFuture, unProcessedMapFuture);

        when(autoProcessedFuture.get()).thenReturn(autoProcessedMap);
        when(unProcessedMapFuture.get()).thenReturn(unProcessedMap);
        when(combinedProgressTrackerFuture.get()).thenReturn(null);

        // Perform test
        Map<String, Map<String, Long>> result = progressTrackerService.getDashBoardProgressTrackerSummary(uuid, pageable, new EmailMessageFilterCriteria(), new EmailMessageFilterCriteria());

        // Assertions
        assertNotNull(result);
        // Add assertions based on the expected result from the service method
        // For example:
        assertFalse(result.isEmpty());
        assertTrue(result.containsKey("key1"));
        assertTrue(result.containsKey("key2"));
        // Check other conditions as needed
    }

    @Test
    public void testGetDashBoardProgressTrackerSummary_ExceptionHandling() throws Exception {
        // Mocking repository to throw an exception
        when(emailMessageSearchRepository.findAll(any())).thenThrow(new RuntimeException("Simulating an exception"));

        // Perform test
        Map<String, Map<String, Long>> result = progressTrackerService.getDashBoardProgressTrackerSummary(uuid, pageable, new EmailMessageFilterCriteria(), new EmailMessageFilterCriteria());

        // Assertions
        assertNull(result);
        assertThrows(RuntimeException.class, () -> progressTrackerService.getDashBoardProgressTrackerSummary(uuid, pageable, new EmailMessageFilterCriteria(), new EmailMessageFilterCriteria()));
        // Check other conditions as needed for the exception scenario
    }

    // Add more test cases for different scenarios
}
----------------

org.mockito.exceptions.misusing.MissingMethodInvocationException: 
when() requires an argument which has to be 'a method call on a mock'.
For example:
    when(mock.getArticles()).thenReturn(articles);

Also, this error might show up because:
1. you stub either of: final/private/equals()/hashCode() methods.
   Those methods *cannot* be stubbed/verified.
   Mocking methods declared on non-public parent classes is not supported.
2. inside when() you don't call method on mock but on some other object.
