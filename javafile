hello java
    @RequestMapping(value = "/party/getActiveParty", produces = { "application/json" }, method = RequestMethod.GET)
public ResponseEntity<List<Party>> getAllActiveParty(UUID uuid) {
        ResponseEntity<List<Party>> response = new ResponseEntity<>(new ArrayList<Party>(), HttpStatus.OK);
        try {
            List<Party> partyList = partyService.findAllActiveParties(uuid);
            response.getBody().addAll(partyList);
            LOGGER.info("PartyApiRestController::getAllActiveParty# getting all the active party partyList(): UUID ={}", partyList, uuid);
        }catch (Exception e){
            LOGGER.error("PartyApiRestController::getAllActiveParty# error while fetching active party UUID={},Exception",uuid,e);
        }
        return response;
    }
------------
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.mockito.Mockito.*;

public class PartyApiRestControllerTest {

    @InjectMocks
    private PartyApiRestController partyController;

    @Mock
    private PartyService partyService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetAllActiveParty_Success() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        List<Party> mockPartyList = new ArrayList<>();
        // Add some sample data to mockPartyList

        when(partyService.findAllActiveParties(uuid)).thenReturn(mockPartyList);

        // Act
        ResponseEntity<List<Party>> response = partyController.getAllActiveParty(uuid);

        // Assert
        verify(partyService).findAllActiveParties(uuid);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockPartyList, response.getBody());
    }

    @Test
    public void testGetAllActiveParty_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        when(partyService.findAllActiveParties(uuid)).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act
        ResponseEntity<List<Party>> response = partyController.getAllActiveParty(uuid);

        // Assert
        verify(partyService).findAllActiveParties(uuid);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }
}
==========================
  public List<Party> findAllActiveParties(UUID uuid) {
        List<Party> activeParty = null;
        try {
            activeParty = partyRepository.fetAllActiveParties();
            LOGGER.info("PartyService::partyService# active party activeParty,UUID={} ", activeParty, uuid);

        } catch (Exception e) {
            LOGGER.error("PartyService::partyService# Exception while getting active party activeParty,UUID={} ", activeParty, uuid);
        }
        return activeParty;
    }
==============
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class PartyServiceTest {

    @InjectMocks
    private PartyService partyService;

    @Mock
    private PartyRepository partyRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindAllActiveParties_Success() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        List<Party> mockPartyList = new ArrayList<>();
        // Add some sample data to mockPartyList

        when(partyRepository.fetAllActiveParties()).thenReturn(mockPartyList);

        // Act
        List<Party> activeParties = partyService.findAllActiveParties(uuid);

        // Assert
        verify(partyRepository).fetAllActiveParties();
        assertEquals(mockPartyList, activeParties);
    }

    @Test
    public void testFindAllActiveParties_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        when(partyRepository.fetAllActiveParties()).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act
        List<Party> activeParties = partyService.findAllActiveParties(uuid);

        // Assert
        verify(partyRepository).fetAllActiveParties();
        assertEquals(null, activeParties); // You can customize this assertion based on your exception handling logic
    }
}
-----------------------------
     @RequestMapping(value = "/email-messages/missingEmailInfo", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
    public ResponseEntity<MissingEmailInfoResponse> updateMissingEmailInfo(MissingEmailInfoRequest missingEmailInfoRequest, @RequestHeader("UUID") UUID uuid) {
        MissingEmailInfoResponse missingEmailInfoResponse = new MissingEmailInfoResponse();
        LOGGER.info("EmailMessagesApiRestController::updateMissingEmailInfo# updating missing email info" +
                " updateMissingEmailInfo{},uuid={}", missingEmailInfoResponse, uuid);
        try {
            missingEmailInfoResponse = emailMessagesService.updateMissingEmailInfo(missingEmailInfoRequest, uuid);
        } catch (Exception e) {
            LOGGER.error("EmailMessagesApiRestController::updateMissingEmailInfo# Exception while updating the " +
                    "missing email details updateMissingEmailInfo{},uuid={}", missingEmailInfoResponse, uuid);
            return new ResponseEntity<>(missingEmailInfoResponse, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(missingEmailInfoResponse, HttpStatus.OK);
    }
--------------------------------------
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class EmailMessagesApiRestControllerTest {

    @InjectMocks
    private EmailMessagesApiRestController emailMessagesController;

    @Mock
    private EmailMessagesService emailMessagesService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testUpdateMissingEmailInfo_Success() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        MissingEmailInfoResponse mockResponse = new MissingEmailInfoResponse();
        // Add sample data to mockRequest and mockResponse

        when(emailMessagesService.updateMissingEmailInfo(mockRequest, uuid)).thenReturn(mockResponse);

        // Act
        ResponseEntity<MissingEmailInfoResponse> responseEntity = emailMessagesController.updateMissingEmailInfo(mockRequest, uuid);

        // Assert
        verify(emailMessagesService).updateMissingEmailInfo(mockRequest, uuid);
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(mockResponse, responseEntity.getBody());
    }

    @Test
    public void testUpdateMissingEmailInfo_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        when(emailMessagesService.updateMissingEmailInfo(mockRequest, uuid)).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act
        ResponseEntity<MissingEmailInfoResponse> responseEntity = emailMessagesController.updateMissingEmailInfo(mockRequest, uuid);

        // Assert
        verify(emailMessagesService).updateMissingEmailInfo(mockRequest, uuid);
        assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());
    }
}
--------------------------
 public Integer createEmailMessageExtraction(MissingEmailInfoRequest missingEmailInfoRequest, UUID uuid) throws Exception{
        Integer emailMessageExtractionId = null;
        EmailMessageExtraction emailMessageExtraction = new EmailMessageExtraction();
        LOGGER.info("EmailMessagesService::createEmailMessageExtraction# getting EmailMessageExtraction id  " +
                "missingEmailInfoRequest{},uuid={}", missingEmailInfoRequest, uuid);
        try {
            EmailExtractionMapping saveeEailExtractionMapping = new EmailExtractionMapping();

            if (missingEmailInfoRequest.getEmailMessageId() != null) {
                emailMessageExtractionId = emailExtractionMappingRepository.getEmailMessageExtractionId1(missingEmailInfoRequest.getEmailMessageId());
            }

            if (emailMessageExtractionId == null) {
                emailMessageExtraction.setReferenceId(missingEmailInfoRequest.getReferenceId());
                emailMessageExtraction = emailMessageExtractionRepository.save(emailMessageExtraction);

                if (emailMessageExtraction != null) {
                    emailMessageExtractionId = emailMessageExtraction.getEmailMessageExtractionId();
                    saveeEailExtractionMapping.setEmailMessageId(missingEmailInfoRequest.getEmailMessageId());
                    saveeEailExtractionMapping.setEmailMessageExtractionId(emailMessageExtraction.getEmailMessageExtractionId());
                    emailExtractionMappingRepository.save(saveeEailExtractionMapping);
                }
            }
            LOGGER.info("EmailMessagesService::createEmailMessageExtraction# EmailMessageExtractionId{} " +
                    ",uuid={}", emailMessageExtractionId, uuid);
        } catch (Exception e) {
            LOGGER.info("EmailMessagesService::createEmailMessageExtraction# Exception while getting emailMessageExtractionId{} " +
                    ",uuid={},Exception()", emailMessageExtractionId, uuid, e);
            throw new Exception(
                    "Exception occured while updating refrenceId " + e);
        }
        return emailMessageExtractionId;
    }
