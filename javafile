hello java
    @RequestMapping(value = "/party/getActiveParty", produces = { "application/json" }, method = RequestMethod.GET)
public ResponseEntity<List<Party>> getAllActiveParty(UUID uuid) {
        ResponseEntity<List<Party>> response = new ResponseEntity<>(new ArrayList<Party>(), HttpStatus.OK);
        try {
            List<Party> partyList = partyService.findAllActiveParties(uuid);
            response.getBody().addAll(partyList);
            LOGGER.info("PartyApiRestController::getAllActiveParty# getting all the active party partyList(): UUID ={}", partyList, uuid);
        }catch (Exception e){
            LOGGER.error("PartyApiRestController::getAllActiveParty# error while fetching active party UUID={},Exception",uuid,e);
        }
        return response;
    }
------------
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.mockito.Mockito.*;

public class PartyApiRestControllerTest {

    @InjectMocks
    private PartyApiRestController partyController;

    @Mock
    private PartyService partyService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetAllActiveParty_Success() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        List<Party> mockPartyList = new ArrayList<>();
        // Add some sample data to mockPartyList

        when(partyService.findAllActiveParties(uuid)).thenReturn(mockPartyList);

        // Act
        ResponseEntity<List<Party>> response = partyController.getAllActiveParty(uuid);

        // Assert
        verify(partyService).findAllActiveParties(uuid);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockPartyList, response.getBody());
    }

    @Test
    public void testGetAllActiveParty_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        when(partyService.findAllActiveParties(uuid)).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act
        ResponseEntity<List<Party>> response = partyController.getAllActiveParty(uuid);

        // Assert
        verify(partyService).findAllActiveParties(uuid);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }
}
==========================
  public List<Party> findAllActiveParties(UUID uuid) {
        List<Party> activeParty = null;
        try {
            activeParty = partyRepository.fetAllActiveParties();
            LOGGER.info("PartyService::partyService# active party activeParty,UUID={} ", activeParty, uuid);

        } catch (Exception e) {
            LOGGER.error("PartyService::partyService# Exception while getting active party activeParty,UUID={} ", activeParty, uuid);
        }
        return activeParty;
    }
==============
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class PartyServiceTest {

    @InjectMocks
    private PartyService partyService;

    @Mock
    private PartyRepository partyRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindAllActiveParties_Success() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        List<Party> mockPartyList = new ArrayList<>();
        // Add some sample data to mockPartyList

        when(partyRepository.fetAllActiveParties()).thenReturn(mockPartyList);

        // Act
        List<Party> activeParties = partyService.findAllActiveParties(uuid);

        // Assert
        verify(partyRepository).fetAllActiveParties();
        assertEquals(mockPartyList, activeParties);
    }

    @Test
    public void testFindAllActiveParties_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        when(partyRepository.fetAllActiveParties()).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act
        List<Party> activeParties = partyService.findAllActiveParties(uuid);

        // Assert
        verify(partyRepository).fetAllActiveParties();
        assertEquals(null, activeParties); // You can customize this assertion based on your exception handling logic
    }
}
-----------------------------
     @RequestMapping(value = "/email-messages/missingEmailInfo", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
    public ResponseEntity<MissingEmailInfoResponse> updateMissingEmailInfo(MissingEmailInfoRequest missingEmailInfoRequest, @RequestHeader("UUID") UUID uuid) {
        MissingEmailInfoResponse missingEmailInfoResponse = new MissingEmailInfoResponse();
        LOGGER.info("EmailMessagesApiRestController::updateMissingEmailInfo# updating missing email info" +
                " updateMissingEmailInfo{},uuid={}", missingEmailInfoResponse, uuid);
        try {
            missingEmailInfoResponse = emailMessagesService.updateMissingEmailInfo(missingEmailInfoRequest, uuid);
        } catch (Exception e) {
            LOGGER.error("EmailMessagesApiRestController::updateMissingEmailInfo# Exception while updating the " +
                    "missing email details updateMissingEmailInfo{},uuid={}", missingEmailInfoResponse, uuid);
            return new ResponseEntity<>(missingEmailInfoResponse, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(missingEmailInfoResponse, HttpStatus.OK);
    }
--------------------------------------
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class EmailMessagesApiRestControllerTest {

    @InjectMocks
    private EmailMessagesApiRestController emailMessagesController;

    @Mock
    private EmailMessagesService emailMessagesService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testUpdateMissingEmailInfo_Success() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        MissingEmailInfoResponse mockResponse = new MissingEmailInfoResponse();
        // Add sample data to mockRequest and mockResponse

        when(emailMessagesService.updateMissingEmailInfo(mockRequest, uuid)).thenReturn(mockResponse);

        // Act
        ResponseEntity<MissingEmailInfoResponse> responseEntity = emailMessagesController.updateMissingEmailInfo(mockRequest, uuid);

        // Assert
        verify(emailMessagesService).updateMissingEmailInfo(mockRequest, uuid);
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
        assertEquals(mockResponse, responseEntity.getBody());
    }

    @Test
    public void testUpdateMissingEmailInfo_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        when(emailMessagesService.updateMissingEmailInfo(mockRequest, uuid)).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act
        ResponseEntity<MissingEmailInfoResponse> responseEntity = emailMessagesController.updateMissingEmailInfo(mockRequest, uuid);

        // Assert
        verify(emailMessagesService).updateMissingEmailInfo(mockRequest, uuid);
        assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());
    }
}
--------------------------
 public Integer createEmailMessageExtraction(MissingEmailInfoRequest missingEmailInfoRequest, UUID uuid) throws Exception{
        Integer emailMessageExtractionId = null;
        EmailMessageExtraction emailMessageExtraction = new EmailMessageExtraction();
        LOGGER.info("EmailMessagesService::createEmailMessageExtraction# getting EmailMessageExtraction id  " +
                "missingEmailInfoRequest{},uuid={}", missingEmailInfoRequest, uuid);
        try {
            EmailExtractionMapping saveeEailExtractionMapping = new EmailExtractionMapping();

            if (missingEmailInfoRequest.getEmailMessageId() != null) {
                emailMessageExtractionId = emailExtractionMappingRepository.getEmailMessageExtractionId1(missingEmailInfoRequest.getEmailMessageId());
            }

            if (emailMessageExtractionId == null) {
                emailMessageExtraction.setReferenceId(missingEmailInfoRequest.getReferenceId());
                emailMessageExtraction = emailMessageExtractionRepository.save(emailMessageExtraction);

                if (emailMessageExtraction != null) {
                    emailMessageExtractionId = emailMessageExtraction.getEmailMessageExtractionId();
                    saveeEailExtractionMapping.setEmailMessageId(missingEmailInfoRequest.getEmailMessageId());
                    saveeEailExtractionMapping.setEmailMessageExtractionId(emailMessageExtraction.getEmailMessageExtractionId());
                    emailExtractionMappingRepository.save(saveeEailExtractionMapping);
                }
            }
            LOGGER.info("EmailMessagesService::createEmailMessageExtraction# EmailMessageExtractionId{} " +
                    ",uuid={}", emailMessageExtractionId, uuid);
        } catch (Exception e) {
            LOGGER.info("EmailMessagesService::createEmailMessageExtraction# Exception while getting emailMessageExtractionId{} " +
                    ",uuid={},Exception()", emailMessageExtractionId, uuid, e);
            throw new Exception(
                    "Exception occured while updating refrenceId " + e);
        }
        return emailMessageExtractionId;
    }
--------------------
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class EmailMessagesServiceTest {

    @InjectMocks
    private EmailMessagesService emailMessagesService;

    @Mock
    private EmailMessageExtractionRepository emailMessageExtractionRepository;

    @Mock
    private EmailExtractionMappingRepository emailExtractionMappingRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateEmailMessageExtraction_Success() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        // Set up your mock objects and expectations as needed for this test case

        when(emailExtractionMappingRepository.getEmailMessageExtractionId1(any())).thenReturn(null); // Customize this based on your scenario
        when(emailMessageExtractionRepository.save(any(EmailMessageExtraction.class))).thenReturn(new EmailMessageExtraction());
        when(emailExtractionMappingRepository.save(any(EmailExtractionMapping.class))).thenReturn(new EmailExtractionMapping());

        // Act
        Integer emailMessageExtractionId = emailMessagesService.createEmailMessageExtraction(mockRequest, uuid);

        // Assert
        // Verify that the expected methods were called and assert the result
        verify(emailExtractionMappingRepository).getEmailMessageExtractionId1(any());
        verify(emailMessageExtractionRepository).save(any(EmailMessageExtraction.class));
        verify(emailExtractionMappingRepository).save(any(EmailExtractionMapping.class));
        // Add assertions for emailMessageExtractionId based on your scenario
    }

    @Test
    public void testCreateEmailMessageExtraction_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        // Set up your mock objects and expectations as needed for this test case

        when(emailExtractionMappingRepository.getEmailMessageExtractionId1(any())).thenReturn(null); // Customize this based on your scenario
        when(emailMessageExtractionRepository.save(any(EmailMessageExtraction.class))).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act and Assert
        // Add assertions to verify that the expected exception is thrown
        assertThrows(Exception.class, () -> emailMessagesService.createEmailMessageExtraction(mockRequest, uuid));
    }
}

=============
   public EmailMessages updateEmailMessageInfo(MissingEmailInfoRequest missingEmailInfoRequest,UUID uuid) throws Exception {
        Integer emailMessageId = missingEmailInfoRequest.getEmailMessageId();
        EmailMessages emailmessages = null;
        LOGGER.info("EmailMessagesService::updateEmailMessageInfo# updating language and party id   " +
                "missingEmailInfoRequest{},uuid={}", missingEmailInfoRequest, uuid);
        try {
            emailmessages = emailMessagesRepository.findByEmailMessageId(emailMessageId);

            String language = missingEmailInfoRequest.getLanguage();
            Integer partyId = missingEmailInfoRequest.getPartyId();

            if (language != null || partyId != null) {

                if (missingEmailInfoRequest.getLanguage() != null) {
                    emailmessages.setLanguage(missingEmailInfoRequest.getLanguage());
                }

                if (missingEmailInfoRequest.getPartyId() != null) {
                    emailmessages.setPartyId(missingEmailInfoRequest.getPartyId());
                }

                emailmessages = emailMessagesRepository.save(emailmessages);
            }

        } catch (Exception e) {
            LOGGER.info("EmailMessagesService::updateEmailMessageInfo# Exception occured while updating language/party info for email Message Id emailMessageId{} " +
                    ",uuid={},Exception()", emailMessageId, uuid, e);
            throw new Exception(
                    "Exception occured while updating language/party info for email Message Id " + emailMessageId);
        }
        return emailmessages;

    }
====================
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class EmailMessagesServiceTest {

    @InjectMocks
    private EmailMessagesService emailMessagesService;

    @Mock
    private EmailMessagesRepository emailMessagesRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testUpdateEmailMessageInfo_Success() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        mockRequest.setEmailMessageId(123); // Set up the emailMessageId in the request
        mockRequest.setLanguage("English");
        mockRequest.setPartyId(456);

        EmailMessages mockEmailMessages = new EmailMessages();
        // Set up your mock EmailMessages object as needed for this test case

        when(emailMessagesRepository.findByEmailMessageId(mockRequest.getEmailMessageId())).thenReturn(mockEmailMessages);

        // Act
        EmailMessages updatedEmailMessages = emailMessagesService.updateEmailMessageInfo(mockRequest, uuid);

        // Assert
        verify(emailMessagesRepository).findByEmailMessageId(mockRequest.getEmailMessageId());
        verify(emailMessagesRepository).save(mockEmailMessages);
        // Add assertions to verify that the EmailMessages object is updated correctly
        assertEquals("English", updatedEmailMessages.getLanguage());
        assertEquals(456, updatedEmailMessages.getPartyId());
    }

    @Test
    public void testUpdateEmailMessageInfo_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        mockRequest.setEmailMessageId(123); // Set up the emailMessageId in the request

        when(emailMessagesRepository.findByEmailMessageId(mockRequest.getEmailMessageId())).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act and Assert
        // Add assertions to verify that the expected exception is thrown
        assertThrows(Exception.class, () -> emailMessagesService.updateEmailMessageInfo(mockRequest, uuid));
    }
}
==
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.springframework.dao.DataIntegrityViolationException; // Import this if necessary

public class EmailMessagesServiceTest {

    @InjectMocks
    private EmailMessagesService emailMessagesService;

    @Mock
    private EmailMessagesRepository emailMessagesRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testUpdateEmailMessageInfo_Success() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        mockRequest.setEmailMessageId(123); // Set up the emailMessageId in the request
        mockRequest.setLanguage("English");
        mockRequest.setPartyId(456);

        EmailMessages mockEmailMessages = new EmailMessages();
        // Set up your mock EmailMessages object as needed for this test case
        mockEmailMessages.setEmailMessageId(123);

        when(emailMessagesRepository.findByEmailMessageId(mockRequest.getEmailMessageId())).thenReturn(mockEmailMessages);
        when(emailMessagesRepository.save(any(EmailMessages.class))).thenReturn(mockEmailMessages);

        // Act
        EmailMessages updatedEmailMessages = emailMessagesService.updateEmailMessageInfo(mockRequest, uuid);

        // Assert
        verify(emailMessagesRepository).findByEmailMessageId(mockRequest.getEmailMessageId());
        verify(emailMessagesRepository).save(mockEmailMessages);

        assertNotNull(updatedEmailMessages);
        assertEquals("English", updatedEmailMessages.getLanguage());
        assertEquals(456, updatedEmailMessages.getPartyId());
    }

    @Test
    public void testUpdateEmailMessageInfo_NullSaveResult() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        mockRequest.setEmailMessageId(123); // Set up the emailMessageId in the request

        EmailMessages mockEmailMessages = new EmailMessages();
        mockEmailMessages.setEmailMessageId(123);

        when(emailMessagesRepository.findByEmailMessageId(mockRequest.getEmailMessageId())).thenReturn(mockEmailMessages);
        when(emailMessagesRepository.save(any(EmailMessages.class))).thenReturn(null); // Simulate a null result after saving

        // Act and Assert
        // Add assertions to verify that the expected exception is thrown
        assertThrows(Exception.class, () -> emailMessagesService.updateEmailMessageInfo(mockRequest, uuid));
    }

    @Test
    public void testUpdateEmailMessageInfo_ExceptionOnFind() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        mockRequest.setEmailMessageId(123); // Set up the emailMessageId in the request

        when(emailMessagesRepository.findByEmailMessageId(mockRequest.getEmailMessageId())).thenThrow(new DataIntegrityViolationException("Some exception message")); // Simulate an exception on find

        // Act and Assert
        // Add assertions to verify that the expected exception is thrown
        assertThrows(Exception.class, () -> emailMessagesService.updateEmailMessageInfo(mockRequest, uuid));
    }
================================
public MissingEmailInfoResponse updateMissingEmailInfo(MissingEmailInfoRequest missingEmailInfoRequest, UUID uuid) throws Exception {
        EmailMessages emailmessages = null;
        Integer emailMessageReqeustId = null;
        String getRefrenceId = null;
        MissingEmailInfoResponse missingEmailInfoResponse = new MissingEmailInfoResponse();
        LOGGER.info("EmailMessagesService::updateMissingEmailInfo# updating language and party id , refrenceId   " +
                "missingEmailInfoRequest{},uuid={}", missingEmailInfoRequest, uuid);
        try {
            emailmessages = updateEmailMessageInfo(missingEmailInfoRequest, uuid);
            emailMessageReqeustId = createEmailMessageExtraction(missingEmailInfoRequest, uuid);

            getRefrenceId = emailMessageExtractionRepository.findByExtractionId1(emailMessageReqeustId);

            missingEmailInfoResponse.setEmailExtractionId(emailMessageReqeustId);
            missingEmailInfoResponse.setEmailMessageId(emailmessages.getEmailMessageId());
            missingEmailInfoResponse.setLanguage(emailmessages.getLanguage());
            missingEmailInfoResponse.setPartyId(emailmessages.getPartyId());
            missingEmailInfoResponse.setReferenceId(getRefrenceId);
        } catch (Exception e) {
            LOGGER.info("EmailMessagesService::updateEmailMessageInfo# Exception occured while updating language/party/refrenceId emailmessages{}, emailMessageReqeustId{} " +
                    ",uuid={},Exception()", emailmessages, emailMessageReqeustId, uuid, e);
            throw new Exception(
                    "EmailMessagesService::updateEmailMessageInfo# Exception occured while updating language/party/refrenceId Exception " + e);
        }
        fiberValidationService.checkFiberEvent(missingEmailInfoRequest.getEmailMessageId(),uuid);
        return missingEmailInfoResponse;
    }
}
===================================
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class EmailMessagesServiceTest {

    @InjectMocks
    private EmailMessagesService emailMessagesService;

    @Mock
    private EmailMessageExtractionRepository emailMessageExtractionRepository;

    @Mock
    private FiberValidationService fiberValidationService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testUpdateMissingEmailInfo_Success() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        // Set up your mock MissingEmailInfoRequest object and expectations as needed for this test case

        EmailMessages mockEmailMessages = new EmailMessages();
        // Set up your mock EmailMessages object as needed for this test case

        when(emailMessagesService.updateEmailMessageInfo(any(), any())).thenReturn(mockEmailMessages);
        when(emailMessagesService.createEmailMessageExtraction(any(), any())).thenReturn(123); // Sample emailMessageReqeustId
        when(emailMessageExtractionRepository.findByExtractionId1(123)).thenReturn("SampleReferenceId");

        // Act
        MissingEmailInfoResponse missingEmailInfoResponse = emailMessagesService.updateMissingEmailInfo(mockRequest, uuid);

        // Assert
        verify(emailMessagesService).updateEmailMessageInfo(mockRequest, uuid);
        verify(emailMessagesService).createEmailMessageExtraction(mockRequest, uuid);
        verify(emailMessageExtractionRepository).findByExtractionId1(123);
        verify(fiberValidationService).checkFiberEvent(mockRequest.getEmailMessageId(), uuid);

        assertNotNull(missingEmailInfoResponse);
        assertEquals(123, missingEmailInfoResponse.getEmailExtractionId());
        assertEquals(mockEmailMessages.getEmailMessageId(), missingEmailInfoResponse.getEmailMessageId());
        assertEquals(mockEmailMessages.getLanguage(), missingEmailInfoResponse.getLanguage());
        assertEquals(mockEmailMessages.getPartyId(), missingEmailInfoResponse.getPartyId());
        assertEquals("SampleReferenceId", missingEmailInfoResponse.getReferenceId());
    }

    @Test
    public void testUpdateMissingEmailInfo_Exception() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        // Set up your mock MissingEmailInfoRequest object and expectations as needed for this test case

        when(emailMessagesService.updateEmailMessageInfo(any(), any())).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act and Assert
        // Add assertions to verify that the expected exception is thrown
        assertThrows(Exception.class, () -> emailMessagesService.updateMissingEmailInfo(mockRequest, uuid));
    }
}
===============
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.dao.DataIntegrityViolationException; // Import this if necessary
import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class EmailMessagesServiceTest {

    @InjectMocks
    private EmailMessagesService emailMessagesService;

    @Mock
    private EmailMessageExtractionRepository emailMessageExtractionRepository;

    @Mock
    private EmailExtractionMappingRepository emailExtractionMappingRepository;

    @Mock
    private EmailMessagesRepository emailMessagesRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateEmailMessageExtraction_Success() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        // Set up your mock MissingEmailInfoRequest object and expectations as needed for this test case

        when(emailExtractionMappingRepository.getEmailMessageExtractionId1(any())).thenReturn(null);
        when(emailMessageExtractionRepository.save(any(EmailMessageExtraction.class))).thenReturn(new EmailMessageExtraction());

        // Act
        Integer emailMessageExtractionId = emailMessagesService.createEmailMessageExtraction(mockRequest, uuid);

        // Assert
        // Add assertions to verify the success scenario
        assertNotNull(emailMessageExtractionId);
    }

    @Test
    public void testCreateEmailMessageExtraction_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        // Set up your mock MissingEmailInfoRequest object and expectations as needed for this test case

        when(emailExtractionMappingRepository.getEmailMessageExtractionId1(any())).thenReturn(null);
        when(emailMessageExtractionRepository.save(any(EmailMessageExtraction.class))).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act and Assert
        // Add assertions to verify that the expected exception is thrown
        assertThrows(Exception.class, () -> emailMessagesService.createEmailMessageExtraction(mockRequest, uuid));
    }

    @Test
    public void testUpdateEmailMessageInfo_Success() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        // Set up your mock MissingEmailInfoRequest object and expectations as needed for this test case

        EmailMessages mockEmailMessages = new EmailMessages();
        // Set up your mock EmailMessages object as needed for this test case

        when(emailMessagesRepository.findByEmailMessageId(any())).thenReturn(mockEmailMessages);
        when(emailMessagesRepository.save(any(EmailMessages.class))).thenReturn(mockEmailMessages);

        // Act
        EmailMessages updatedEmailMessages = emailMessagesService.updateEmailMessageInfo(mockRequest, uuid);

        // Assert
        // Add assertions to verify the success scenario
        assertNotNull(updatedEmailMessages);
    }

    @Test
    public void testUpdateEmailMessageInfo_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        // Set up your mock MissingEmailInfoRequest object and expectations as needed for this test case

        when(emailMessagesRepository.findByEmailMessageId(any())).thenThrow(new DataIntegrityViolationException("Some exception message")); // Replace SomeException with your actual exception class

        // Act and Assert
        // Add assertions to verify that the expected exception is thrown
        assertThrows(Exception.class, () -> emailMessagesService.updateEmailMessageInfo(mockRequest, uuid));
    }

    @Test
    public void testUpdateMissingEmailInfo_Success() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        // Set up your mock MissingEmailInfoRequest object and expectations as needed for this test case

        EmailMessages mockEmailMessages = new EmailMessages();
        when(emailMessagesService.updateEmailMessageInfo(any(), any())).thenReturn(mockEmailMessages);
        when(emailMessagesService.createEmailMessageExtraction(any(), any())).thenReturn(123); // Sample emailMessageReqeustId
        when(emailMessageExtractionRepository.findByExtractionId1(123)).thenReturn("SampleReferenceId");

        // Act
        MissingEmailInfoResponse missingEmailInfoResponse = emailMessagesService.updateMissingEmailInfo(mockRequest, uuid);

        // Assert
        // Add assertions to verify the success scenario
        assertNotNull(missingEmailInfoResponse);
    }

    @Test
    public void testUpdateMissingEmailInfo_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        // Set up your mock MissingEmailInfoRequest object and expectations as needed for this test case

        when(emailMessagesService.updateEmailMessageInfo(any(), any())).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act and Assert
        // Add assertions to verify that the expected exception is thrown
        assertThrows(Exception.class, () -> emailMessagesService.updateMissingEmailInfo(mockRequest, uuid));
    }
}
----------------------------
@Test
public void testUpdateMissingEmailInfo_Exception() {
    // Arrange
    UUID uuid = UUID.randomUUID();
    MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
    // Set up your mock MissingEmailInfoRequest object and expectations as needed for this test case

    when(emailMessagesService.updateEmailMessageInfo(any(), any())).thenThrow(SomeException.class); // Replace SomeException with your actual exception class

    // Act and Assert
    // Add assertions to verify that the expected exception is thrown
    assertThrows(SomeException.class, () -> emailMessagesService.updateMissingEmailInfo(mockRequest, uuid));
}

=================
@Test
public void testUpdateEmailMessageInfo_Success() throws Exception {
    // Arrange
    UUID uuid = UUID.randomUUID();
    MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
    mockRequest.setEmailMessageId(123); // Set a valid emailMessageId in the request

    EmailMessages mockEmailMessages = new EmailMessages();
    // Set up your mock EmailMessages object as needed for this test case

    when(emailMessagesRepository.findByEmailMessageId(any())).thenReturn(mockEmailMessages);
    when(emailMessagesRepository.save(any(EmailMessages.class))).thenReturn(mockEmailMessages);

    // Act
    EmailMessages updatedEmailMessages = emailMessagesService.updateEmailMessageInfo(mockRequest, uuid);

    // Assert
    // Add assertions to verify the success scenario
    assertNotNull(updatedEmailMessages);
}
============
public Integer createEmailMessageExtraction(MissingEmailInfoRequest missingEmailInfoRequest, UUID uuid) throws MyCustomException {
    Integer emailMessageExtractionId = null;
    EmailMessageExtraction emailMessageExtraction = new EmailMessageExtraction();
    LOGGER.info("EmailMessagesService::createEmailMessageExtraction# getting EmailMessageExtraction id " +
            "missingEmailInfoRequest{},uuid={}", missingEmailInfoRequest, uuid);
    try {
        EmailExtractionMapping saveEmailExtractionMapping = new EmailExtractionMapping();

        if (missingEmailInfoRequest.getEmailMessageId() != null) {
            emailMessageExtractionId = emailExtractionMappingRepository.getEmailMessageExtractionId1(missingEmailInfoRequest.getEmailMessageId());
        }

        if (emailMessageExtractionId == null) {
            emailMessageExtraction.setReferenceId(missingEmailInfoRequest.getReferenceId());
            emailMessageExtraction = emailMessageExtractionRepository.save(emailMessageExtraction);

            if (emailMessageExtraction != null) {
                emailMessageExtractionId = emailMessageExtraction.getEmailMessageExtractionId();
                saveEmailExtractionMapping.setEmailMessageId(missingEmailInfoRequest.getEmailMessageId());
                saveEmailExtractionMapping.setEmailMessageExtractionId(emailMessageExtraction.getEmailMessageExtractionId());
                emailExtractionMappingRepository.save(saveEmailExtractionMapping);
            }
        }
        LOGGER.info("EmailMessagesService::createEmailMessageExtraction# EmailMessageExtractionId{} " +
                ",uuid={}", emailMessageExtractionId, uuid);
    } catch (DataIntegrityViolationException e) {
        LOGGER.error("Data integrity violation while creating EmailMessageExtraction. UUID={}, Exception: {}", uuid, e);
        throw new MyCustomException("Data integrity violation while updating referenceId", e);
    } catch (Exception e) {
        LOGGER.error("Exception while creating EmailMessageExtraction. UUID={}, Exception: {}", uuid, e);
        throw new MyCustomException("Exception occurred while updating referenceId", e);
    }
    return emailMessageExtractionId;
}

=================
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.dao.DataIntegrityViolationException;
import java.util.UUID;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;

public class EmailMessagesServiceTest {

    @InjectMocks
    private EmailMessagesService emailMessagesService;

    @Mock
    private EmailExtractionMappingRepository emailExtractionMappingRepository;

    @Mock
    private EmailMessageExtractionRepository emailMessageExtractionRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateEmailMessageExtraction_Success() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        mockRequest.setEmailMessageId(123); // Set a valid emailMessageId
        EmailMessageExtraction mockExtraction = new EmailMessageExtraction();
        mockExtraction.setEmailMessageExtractionId(456);

        when(emailExtractionMappingRepository.getEmailMessageExtractionId1(123)).thenReturn(null);
        when(emailMessageExtractionRepository.save(any(EmailMessageExtraction.class))).thenReturn(mockExtraction);

        // Act
        Integer emailMessageExtractionId = emailMessagesService.createEmailMessageExtraction(mockRequest, uuid);

        // Assert
        assertNotNull(emailMessageExtractionId);
        assertEquals(456, emailMessageExtractionId);
        verify(emailExtractionMappingRepository).getEmailMessageExtractionId1(123);
        verify(emailMessageExtractionRepository).save(any(EmailMessageExtraction.class));
    }

    @Test
    public void testCreateEmailMessageExtraction_DataIntegrityViolationException() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        mockRequest.setEmailMessageId(123); // Set a valid emailMessageId

        when(emailExtractionMappingRepository.getEmailMessageExtractionId1(123)).thenReturn(null);
        when(emailMessageExtractionRepository.save(any(EmailMessageExtraction.class)))
                .thenThrow(DataIntegrityViolationException.class);

        // Act and Assert
        assertThrows(MyCustomException.class, () -> emailMessagesService.createEmailMessageExtraction(mockRequest, uuid));
        verify(emailExtractionMappingRepository).getEmailMessageExtractionId1(123);
        verify(emailMessageExtractionRepository).save(any(EmailMessageExtraction.class));
    }

    @Test
    public void testCreateEmailMessageExtraction_EmailMessageExtractionIdNotNull() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        mockRequest.setEmailMessageId(123); // Set a valid emailMessageId

        when(emailExtractionMappingRepository.getEmailMessageExtractionId1(123)).thenReturn(789);

        // Act
        Integer emailMessageExtractionId = emailMessagesService.createEmailMessageExtraction(mockRequest, uuid);

        // Assert
        assertNotNull(emailMessageExtractionId);
        assertEquals(789, emailMessageExtractionId);
        verify(emailExtractionMappingRepository).getEmailMessageExtractionId1(123);
        verify(emailMessageExtractionRepository, never()).save(any(EmailMessageExtraction.class));
    }

    @Test
    public void testCreateEmailMessageExtraction_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        mockRequest.setEmailMessageId(123); // Set a valid emailMessageId

        when(emailExtractionMappingRepository.getEmailMessageExtractionId1(123)).thenReturn(null);
        when(emailMessageExtractionRepository.save(any(EmailMessageExtraction.class)))
                .thenThrow(SomeException.class); // Replace SomeException with your actual exception class

        // Act and Assert
        assertThrows(MyCustomException.class, () -> emailMessagesService.createEmailMessageExtraction(mockRequest, uuid));
        verify(emailExtractionMappingRepository).getEmailMessageExtractionId1(123);
        verify(emailMessageExtractionRepository).save(any(EmailMessageExtraction.class));
    }
}
====
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import java.util.UUID;

public class EmailMessagesServiceTest {

    private EmailMessagesService emailMessagesService;
    private EmailMessagesRepository emailMessagesRepository;
    private EmailMessageExtractionRepository emailMessageExtractionRepository;
    private FiberValidationService fiberValidationService;

    @Before
    public void setUp() {
        emailMessagesService = new EmailMessagesService();
        emailMessagesRepository = mock(EmailMessagesRepository.class);
        emailMessageExtractionRepository = mock(EmailMessageExtractionRepository.class);
        fiberValidationService = mock(FiberValidationService.class);
        emailMessagesService.setEmailMessagesRepository(emailMessagesRepository);
        emailMessagesService.setEmailMessageExtractionRepository(emailMessageExtractionRepository);
        emailMessagesService.setFiberValidationService(fiberValidationService);
    }

    @Test
    public void testUpdateMissingEmailInfo_Success() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        mockRequest.setEmailMessageId(123); // Set a valid emailMessageId
        // Set up your mockRequest object and expectations as needed for this test case
        
        EmailMessages mockEmailMessages = new EmailMessages();
        mockEmailMessages.setEmailMessageId(456); // Set a valid emailMessageId
        mockEmailMessages.setLanguage("English");
        mockEmailMessages.setPartyId(789);
        
        when(emailMessagesRepository.findByEmailMessageId(eq(mockRequest.getEmailMessageId()))).thenReturn(mockEmailMessages);

        Integer mockExtractionId = 789; // Set a valid extractionId
        when(emailMessageExtractionRepository.findByExtractionId1(eq(mockExtractionId))).thenReturn("Ref123");

        // Act
        MissingEmailInfoResponse response = emailMessagesService.updateMissingEmailInfo(mockRequest, uuid);

        // Assert
        assertNotNull(response);
        assertEquals(mockEmailMessages.getEmailMessageId(), response.getEmailMessageId());
        assertEquals(mockEmailMessages.getLanguage(), response.getLanguage());
        assertEquals(mockEmailMessages.getPartyId(), response.getPartyId());
        assertEquals("Ref123", response.getReferenceId());
        
        // Verify that emailMessageExtractionRepository.findByExtractionId1 was called with the expected argument
        verify(emailMessageExtractionRepository).findByExtractionId1(eq(mockExtractionId));

        // Verify that fiberValidationService.checkFiberEvent was called with the expected arguments
        verify(fiberValidationService).checkFiberEvent(eq(mockRequest.getEmailMessageId()), eq(uuid));
    }

    @Test(expected = Exception.class)
    public void testUpdateMissingEmailInfo_ExceptionHandling() throws Exception {
        // Arrange
        UUID uuid = UUID.randomUUID();
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        // Set up your mockRequest object and expectations as needed for this test case
        
        when(emailMessagesRepository.findByEmailMessageId(anyInt())).thenThrow(new Exception("Simulated Exception"));

        // Act
        emailMessagesService.updateMissingEmailInfo(mockRequest, uuid);

        // Assert
        // Expecting an exception to be thrown
    }
}
----------------------
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class EmailMessagesServiceTest {

    @InjectMocks
    private EmailMessagesService emailMessagesService;

    @Mock
    private EmailMessagesRepository emailMessagesRepository;

    @Mock
    private EmailExtractionMappingRepository emailExtractionMappingRepository;

    @Mock
    private EmailMessageExtractionRepository emailMessageExtractionRepository;

    @Mock
    private FiberValidationService fiberValidationService;

    @Test
    public void testUpdateMissingEmailInfo_Success() throws Exception {
        // Mock the dependencies
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        UUID uuid = UUID.randomUUID();

        EmailMessages emailMessages = new EmailMessages();
        emailMessages.setEmailMessageId(123);
        when(emailMessagesRepository.findByEmailMessageId(anyInt())).thenReturn(emailMessages);

        when(emailExtractionMappingRepository.getEmailMessageExtractionId1(anyInt())).thenReturn(456);

        when(emailMessageExtractionRepository.findByExtractionId1(anyInt())).thenReturn("Reference123");

        // Invoke the method
        MissingEmailInfoResponse response = emailMessagesService.updateMissingEmailInfo(mockRequest, uuid);

        // Verify the response and interactions
        assertFalse(response.isError());
        assertEquals(123, response.getEmailMessageId());
        assertEquals("English", response.getLanguage());
        assertEquals(456, response.getPartyId());
        assertEquals("Reference123", response.getReferenceId());
        
        // Verify that fiberValidationService is called
        verify(fiberValidationService).checkFiberEvent(123, uuid);
    }

    @Test
    public void testUpdateMissingEmailInfo_UpdateEmailMessageInfoException() throws Exception {
        // Mock the dependencies
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        UUID uuid = UUID.randomUUID();

        when(emailMessagesRepository.findByEmailMessageId(anyInt())).thenThrow(new SomeException());

        // Invoke the method
        try {
            emailMessagesService.updateMissingEmailInfo(mockRequest, uuid);
            fail("Exception should be thrown");
        } catch (SomeException e) {
            // Verify that the exception is propagated
        }

        // Verify that fiberValidationService is not called
        verifyZeroInteractions(fiberValidationService);
    }

    @Test
    public void testUpdateMissingEmailInfo_CreateEmailMessageExtractionException() throws Exception {
        // Mock the dependencies
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        UUID uuid = UUID.randomUUID();

        EmailMessages emailMessages = new EmailMessages();
        emailMessages.setEmailMessageId(123);
        when(emailMessagesRepository.findByEmailMessageId(anyInt())).thenReturn(emailMessages);

        when(emailExtractionMappingRepository.getEmailMessageExtractionId1(anyInt())).thenThrow(new SomeException());

        // Invoke the method
        try {
            emailMessagesService.updateMissingEmailInfo(mockRequest, uuid);
            fail("Exception should be thrown");
        } catch (SomeException e) {
            // Verify that the exception is propagated
        }

        // Verify that fiberValidationService is not called
        verifyZeroInteractions(fiberValidationService);
    }

    @Test
    public void testUpdateMissingEmailInfo_FindByExtractionId1Exception() throws Exception {
        // Mock the dependencies
        MissingEmailInfoRequest mockRequest = new MissingEmailInfoRequest();
        UUID uuid = UUID.randomUUID();

        EmailMessages emailMessages = new EmailMessages();
        emailMessages.setEmailMessageId(123);
        when(emailMessagesRepository.findByEmailMessageId(anyInt())).thenReturn(emailMessages);

        when(emailExtractionMappingRepository.getEmailMessageExtractionId1(anyInt())).thenReturn(456);

        when(emailMessageExtractionRepository.findByExtractionId1(anyInt())).thenThrow(new SomeException());

        // Invoke the method
        try {
            emailMessagesService.updateMissingEmailInfo(mockRequest, uuid);
            fail("Exception should be thrown");
        } catch (SomeException e) {
            // Verify that the exception is propagated
        }

        // Verify that fiberValidationService is not called
        verifyZeroInteractions(fiberValidationService);
    }
}

===========
A "NullPointerException" could be thrown; "emailmessages" is nullable here.
