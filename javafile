hello java
    @RequestMapping(value = "/party/getActiveParty", produces = { "application/json" }, method = RequestMethod.GET)
public ResponseEntity<List<Party>> getAllActiveParty(UUID uuid) {
        ResponseEntity<List<Party>> response = new ResponseEntity<>(new ArrayList<Party>(), HttpStatus.OK);
        try {
            List<Party> partyList = partyService.findAllActiveParties(uuid);
            response.getBody().addAll(partyList);
            LOGGER.info("PartyApiRestController::getAllActiveParty# getting all the active party partyList(): UUID ={}", partyList, uuid);
        }catch (Exception e){
            LOGGER.error("PartyApiRestController::getAllActiveParty# error while fetching active party UUID={},Exception",uuid,e);
        }
        return response;
    }
------------
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.mockito.Mockito.*;

public class PartyApiRestControllerTest {

    @InjectMocks
    private PartyApiRestController partyController;

    @Mock
    private PartyService partyService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetAllActiveParty_Success() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        List<Party> mockPartyList = new ArrayList<>();
        // Add some sample data to mockPartyList

        when(partyService.findAllActiveParties(uuid)).thenReturn(mockPartyList);

        // Act
        ResponseEntity<List<Party>> response = partyController.getAllActiveParty(uuid);

        // Assert
        verify(partyService).findAllActiveParties(uuid);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockPartyList, response.getBody());
    }

    @Test
    public void testGetAllActiveParty_Exception() {
        // Arrange
        UUID uuid = UUID.randomUUID();
        when(partyService.findAllActiveParties(uuid)).thenThrow(new SomeException()); // Replace SomeException with your actual exception class

        // Act
        ResponseEntity<List<Party>> response = partyController.getAllActiveParty(uuid);

        // Assert
        verify(partyService).findAllActiveParties(uuid);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }
}
==========================
  public List<Party> findAllActiveParties(UUID uuid) {
        List<Party> activeParty = null;
        try {
            activeParty = partyRepository.fetAllActiveParties();
            LOGGER.info("PartyService::partyService# active party activeParty,UUID={} ", activeParty, uuid);

        } catch (Exception e) {
            LOGGER.error("PartyService::partyService# Exception while getting active party activeParty,UUID={} ", activeParty, uuid);
        }
        return activeParty;
    }
